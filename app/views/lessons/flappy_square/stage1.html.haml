- stage_index = 1
- section_index = 0
- lesson_index = 0
- challenge_index = 0

#flappy_square_stage1.page
  %h1 Stage 1

  .description.row.py-3
    .col-xs-6
      %h2.py-2
        Flappy Square Overview
      %p
        In the Flappy Square challenge we'll create a simplified version
        of the popular mobile game,
        = "#{link_to('Flappy Birds', 'https://www.flappybird.com/', target: '_blank')}.".html_safe
      %p
        For our game we won't be creating any fancy graphics, we'll simply have
        a square that flies when you click on the canvas with the mouse and falls when you
        don't. You'll have to navigate through randomly generated walls in the course
        by flying to the correct height to pass through the hole.

    .col-xs-6
      = image_tag('flappy_square.gif', class: 'img-fluid')

  .description.row.py-3
    .col-xs-6
      %h2.py-2
        Stage 1 Overview
      %p
        In the first stage of the Flappy Square challenge we'll focus
        on drawing the basic elements of our game: the flappy square,
        the boundary of the game, and one wall.
    .col-xs-6
      = image_tag("lessons/flappy_square/stage#{stage_index}/overview.png", class: 'img-fluid canvas-example')

  - section_index += 1
  .section.py-2{id: "section#{section_index}"} &nbsp;

  - lesson_index += 1
  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: The Coordinate System

          .float-xs-right.mx-2
            = image_tag('lessons/coordinates/reference.png', class: 'img-fluid')

          %p
            Before we get started with our game it is important to understand
            the coordinate system we'll be drawing in.
          %p
            When drawing in the
            = link_to_lesson('coordinate system', :coordinates, nil, class: 'reference-link', data: {slug: :coordinates})
            on a canvas element (as seen to the right) the
            %span.highlight "y" values go down.
          %p
            Unlike with a normal graph, where the positive "y" values go up starting from the bottom, in the canvas
            positive "y" values go down starting from the top.
          %p
            So the point (50, 100) is 50 pixels from the right of the top left corner of the canvas and
            100 pixels down from the top left corner.
          %p
            In the example below, we are drawing two squares that are
            %span.highlight 25 pixels wide and 25 pixels high
            using the
            = link_to_lesson('context.fillRect(x, y, width, height)', :fill_rect, nil, class: 'reference-link', data: {slug: :fill_rect})
            method. The
            %span.highlight black square is at (0, 0)
            so it's top left corner is in the top left corner of the canvas. The
            %span.highlight blue square is at (50, 100)
            so it's top left corner is 50 pixels to the right and 100 pixels down.
          %p
            Try adjusting the coordinates of the two squares and see how they move around
            the coordinate system.

          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]

          %p.mt-3
            %strong Important:
            %span.highlight This is a lesson, not a challenge.
            It is here just to help you learn. Play around with it to see your code changes
            affect the result. Scroll down for the first challenge.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage#{stage_index}_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                context.fillRect(0, 0, 25, 25);

                context.fillStyle = 'blue';
                context.fillRect(50, 100, 25, 25);


            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage#{stage_index}_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-4{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            Draw a rectangle using the
            = link_to_lesson('context.fillRect(x, y, width, height)', :fill_rect, nil, class: 'reference-link', data: {slug: :fill_rect})
            method where you replace x with the top left x coordinate, y with the top left y coordinate,
            width with the width of the rectangle and height with the height of the rectangle.
          %p
            Draw the rectangle so that it's top left corner is 90px down from the top of the canvas
            and 60px over from the left of the canvas. The rectangle should be 60px tall (height) and
            45px wide (width).

          %p In the end your drawing should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage#{stage_index}_challenge#{challenge_index}"}
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            context.fillRect(60, 90, 45, 60);



  - section_index += 1
  .section.py-2{id: "section#{section_index}"} &nbsp;

  - lesson_index += 1
  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Draw The Flappy Square
          %p
            In our game our flying square will be just that, a simple square.
          %p
            In this example, we'll draw a simple square using
            = link_to_lesson('context.fillRect(x, y, width, height)', :fill_rect, nil, class: 'reference-link', data: {slug: :fill_rect})
            that is
            %span.highlight 50 pixels wide and 50 pixels tall.
            We'll position it so that its
            %span.highlight top left corner is at x = 100, y = 50: (100, 50).
          %p
            Remember: In the context's
            = link_to_lesson('coordinate system', :coordinates, nil, class: 'reference-link', data: {slug: :coordinates})
            the origin (0, 0) is at the top left corner of the canvas.

          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]

          %p.mt-3
            %strong Important:
            %span.highlight This is a lesson, not a challenge.
            It is here just to help you learn. Play around with it to see your code changes
            affect the result. Scroll down for the next challenge.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage#{stage_index}_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                context.fillRect(100, 50, 50, 50);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage#{stage_index}_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-4{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            Draw a flappy square that is
            %span.highlight 20 pixels wide and 20 pixels tall
            and position it at
            %span.highlight (50, 100).

          %p In the end your flappy square should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage#{stage_index}_challenge#{challenge_index}"}
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            context.fillRect(50, 100, 20, 20);



  - section_index += 1
  .section.py-2{id: "section#{section_index}"} &nbsp;

  - lesson_index += 1
  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Using context.strokeRect()
          %p
            We're going to want to create a "game area" for our game which
            is essentially just a rectangle drawn within the canvas
            that represents the valid area for the game to be drawn in.
          %p
            But we don't want our square to be filled in, so
            = link_to_lesson('context.fillRect(x, y, width, height)', :fill_rect, nil, class: 'reference-link', data: {slug: :fill_rect})
            won't work. We'll need to use
            %code context.strokeRect(x, y, width, height)
            instead.
          %p
            %code context.strokeRect(x, y, width, height)
            works the same as
            %code context.fillRect(x, y, width, height)
            but doesn't fill in the space with any color.
          %p
            The example below shows a simple example of using
            %code context.strokeRect(x, y, width, height)
            to draw a square on the canvas.

          = render 'lessons/relevant', relevant: [:coordinates]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage#{stage_index}_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                context.strokeRect(50, 50, 100, 100);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage#{stage_index}_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-4{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            Let's take the code from Challenge
            = challenge_index - 1
            and add a boundary for our game.
          %p
            The boundary should
            %span.highlight start at (25, 25) and extend to (450, 300),
            forming a rectangle. Use
            %code context.strokeRect(x, y, width, height)

          %p In the end our game should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:line_to, :fill_rect, :coordinates]
          = render 'lessons/code_preview', stage: stage_index, challenge: challenge_index - 1, editor_id: "flappy_square_stage#{stage_index}_challenge#{challenge_index - 1}_editor"

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            // YOUR PREVIOUS FLAPPY SQUARE CODE

            // YOUR NEW CODE FOR A GAME BOUNDARY



        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage#{stage_index}_challenge#{challenge_index}"}
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            context.strokeRect(25, 25, 425, 275);

            context.fillRect(50, 100, 20, 20);



  - section_index += 1
  .section.py-2{id: "section#{section_index}"} &nbsp;

  - challenge_index += 1
  .challenge.row.py-4{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            Let's take a look at the walls in our game.
          %p
            Eventually we'll need to create many walls, animate them, randomize them,
            and track them to make sure that we are not running into the them.
          %p
            Let's start, though, by simply creating one wall. We'll create one rectangle
            that is attached to the roof of the game area with a matching rectangle on
            the floor of the game area.
          %p
            So try to draw two rectangles (a wall), one attached to the
            %span.highlight roof (y = 25)
            and one to the
            %span.highlight floor (y = 300)
            Each of them should be
            %span.highlight 100 pixels tall and 50 pixels wide.
          %p
            We also don't want to draw our walls right on top of the flappy square
            when the game starts, so let's draw this first one
            %span.highlight 125 pixels out
            from the left boundary of the game.
          %p
            Hint: you can make the computer do the calculations for you. For example:
          %pre
            %code
              :preserve
                context.fillRect(100 - 50, 100 + 50, 200, 200);
          %p
            This would is essentially the same as writing
            %code context.fillRect(50, 150, 200, 200);

          %p In the end your flappy square should behave like the example provided to the right.

          = render 'lessons/relevant', relevant: [:fill_rect, :coordinates, :line_to]
          = render 'lessons/code_preview', stage: stage_index, challenge: challenge_index - 1, editor_id: "flappy_square_stage#{stage_index}_challenge#{challenge_index - 1}_editor"

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            // CODE FOR YOUR FLAPPY SQUARE

            // CODE FOR YOUR GAME BOUNDARY

            // CODE FOR YOUR WALL


        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage#{stage_index}_challenge#{challenge_index}"}
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            context.strokeRect(25, 25, 425, 275);

            context.fillRect(50, 100, 20, 20);

            context.fillRect(25 + 125, 25, 50, 100);
            context.fillRect(25 + 125, 300 - 100, 50, 100);



  - section_index += 1
  .section.py-2{id: "section#{section_index}"} &nbsp;

  - lesson_index += 1
  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Using Variables

          %p
            There are a lot of numbers in our game and many of them are dependent on each other.
          %p
            For example if we want to place our first wall 125 pixels from the left border
            of our game area then it would be nice to be able to reference the left border
            "x" position when we draw our first wall.
          %p
            %span.highlight
              Variables allow us to store information and
              reference / manipulate that information later.
          %p
            Variable are a core concept in software development. If you feel uncertain about them
            you should click on the "variables" quick reference button below and click on the
            "Full Lesson" button in the pop-up.
          %p
            In this example we use a variable to position a square
            %span.highlight 150 pixels
            from a left hand border.

          = render 'lessons/relevant', relevant: [:variables, :coordinates, :fill_rect, :line_to]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage#stage_index_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                var wallX = 50;
                var wallY = 50;
                var wallHeight = 200;

                var squareX = wallX + 150;
                var squareY = 100;
                var squareSize = 50;

                context.beginPath();
                context.moveTo(wallX, wallY);
                context.lineTo(wallX, wallY + wallHeight);
                context.stroke();

                context.fillRect(squareX, squareY, squareSize, squareSize);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage#{stage_index}_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-4{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            Use
            %span.highlight
              = link_to_lesson('variables', :variables, nil, class: 'reference-link', data: {slug: :variables})
              to capture the various aspects of your flappy square, boundary, and first wall.
          %p
            Setting a variable looks like this:

          %pre
            %code
              :preserve
                var wallX = 25;

          %p
            We've provided the variables for the boundary. We've set the minimum values
            and maximum values for the boundary so that it will be easier to make boundary
            calculations in the future. We've also provided placeholder variable declarations
            for the flappy squre. You'll need to write the variables for the wall.
          %p
            As a reminder the flappy square should be positioned at
            %span.highlight (50, 100)
            and should be
            %span.highlight 20 pixels wide and 20 pixels tall.
          %p
            Each section of the wall (top and bottom) should be
            %span.highlight 50 pixels wide and 100 pixels tall
            and should be attached to the top and bottom of the boundary respectively.
          %p
            To work with our variable effectively let's reposition our wall
            %span.highlight 100 pixels
            from the left boundary instead of 125 pixels.
          %p
            Variable are an importent concept in coding. If you feel uncertain about them
            you can find more information and exercise around functions by clicking on the "variables"
            quick reference button below and then clicking on the "Full Lesson" button in the pop-up.
          %p
            In the end your game should look like the image provided above.

          = render 'lessons/relevant', relevant: [:variables, :coordinates, :fill_rect, :line_to]
          = render 'lessons/code_preview', stage: stage_index, challenge: challenge_index - 1, editor_id: "flappy_square_stage#{stage_index}_challenge#{challenge_index - 1}_editor"

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var boundaryMinX = 25;
            var boundaryMinY = 25;
            var boundaryMaxX = 450;
            var boundaryMaxY = 300;

            var squareX = ;
            var squareY = ;
            var squareSize = ;

            // WALL VARIABLES HERE

            // CODE FOR YOUR FLAPPY SQUARE

            // CODE FOR YOUR GAME BOUNDARY

            // CODE FOR YOUR WALL


        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage#{stage_index}_challenge#{challenge_index}"}
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var boundaryMinX = 25;
            var boundaryMinY = 25;
            var boundaryMaxX = 450;
            var boundaryMaxY = 300;

            var squareX = 50;
            var squareY = 100;
            var squareSize = 20;

            var wallX = boundaryMinX + 100;
            var wallWidth = 50;
            var wallHeight = 100;

            context.strokeRect(boundaryMinX, boundaryMinY, boundaryMaxX - boundaryMinX, boundaryMaxY - boundaryMinY);

            context.fillRect(squareX, squareY, squareSize, squareSize);

            context.fillRect(wallX, boundaryMinY, wallWidth, wallHeight);
            context.fillRect(wallX, boundaryMaxY - wallHeight, wallWidth, wallHeight);




  - section_index += 1
  .section.py-2{id: "section#{section_index}"} &nbsp;

  - challenge_index += 1
  .challenge.row.py-4{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            A best practice in coding is to try and not repeat yourself.
          %p
            One of the most powerful aspects of coding is how you can create
            structures of information and functionality that can be reused
            in different ways.
          %p
            In our code right now are variables look very similar:
          %pre
            %code
              :preserve
                var boundaryMinX = 25;
                var boundaryMinY = 25;
                var boundaryMaxX = 450;
                var boundaryMaxY = 300;
          %p
            Those four variable declations all repeat the word "boundary".
          %p
            Instead we could use a hash, which is a way to store information,
            to collect all of these variables together.
          %p
            This would look like this:
          %pre
            %code
              :preserve
                var boundary = {
                  minX: 25,
                  minY: 25,
                  maxX: 450,
                  maxY: 300
                }
          %p
            This makes it a bit easier to read our code and reduces a lot of
            unnecessary duplication.
          %p
            Rewrite your code from the previous challenge using this format.
          %p
            Let's also set the wall's "x" position back to 125 pixels from the
            left boundary.
          %p
            In the end your game should look like the image provided above.

          = render 'lessons/relevant', relevant: [:variables, :coordinates, :fill_rect, :line_to]
          = render 'lessons/code_preview', stage: stage_index, challenge: challenge_index - 1, editor_id: "flappy_square_stage#{stage_index}_challenge#{challenge_index - 1}_editor"

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage#{stage_index}_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var boundary = {
              // SET THE DETAILS OF YOUR BOUNDARY HASH HERE
            };

            // SQUARE HASH HERE

            // WALL HASH HERE

            // CODE FOR YOUR FLAPPY SQUARE

            // CODE FOR YOUR GAME BOUNDARY

            // CODE FOR YOUR WALL


        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage#{stage_index}/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage#{stage_index}_challenge#{challenge_index}"}
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var boundary = {
              minX: 25,
              minY: 25,
              maxX: 450,
              maxY: 300
            };

            var square = {
              x: 50,
              y: 100,
              size: 20
            };

            var wall = {
              x: boundary.minX + 125,
              width: 50,
              height: 100
            };

            context.strokeRect(boundary.minX, boundary.minY, boundary.maxX - boundary.minX, boundary.maxY - boundary.minY);

            context.fillRect(square.x, square.y, square.size, square.size);

            context.fillRect(wall.x, boundary.minY, wall.width, wall.height);
            context.fillRect(wall.x, boundary.maxY - wall.height, wall.width, wall.height);
