- lesson_index = 0
- challenge_index = 0

#flappy_square_stage1.page
  %h1 Stage 1

  .description.row.py-3
    .col-xs-6
      %h2.py-2
        Flappy Square Overview
      %p
        In the Flappy Square challenge we'll create a simplified version
        of the popular mobile game,
        = "#{link_to('Flappy Birds', 'https://www.flappybird.com/', target: '_blank')}.".html_safe
      %p
        For our game we won't be creating any fancy graphics, we'll simply use
        a basic squre that flies when you click the 'up' key and falls when you
        don't. You'll have to navigate through randomly generated holes in the course.

    .col-xs-6
      = image_tag('flappy_square.gif', class: 'img-fluid')

  .description.row.py-3
    .col-xs-6
      %h2.py-2
        Stage 1 Overview
      %p
        In the first stage of the Flappy Square challenge we'll focus
        on drawing our little flappy square and giving it a realistic
        falling animation (i.e. simulating gravity).
    .col-xs-6
      = image_tag('lessons/flappy_square/stage1/challenge6Example.gif', class: 'img-fluid canvas-example')


  - lesson_index += 1
  .lesson.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: The Coordinate System

          .float-xs-right.mx-2
            = image_tag('lessons/coordinates/reference.png', class: 'img-fluid')

          %p
            Before we get started with our game it is important to understand
            the coordinate system we'll be drawing in.
          %p
            When drawing in the
            = link_to_lesson('coordinate system', :coordinates, nil, class: 'reference-link', data: {slug: :coordinates})
            on a canvas element (as seen to the right) the
            %span.highlight "y" values go down.
          %p
            Unlike with a normal graph, where the positive "y" values go up starting from the bottom, in the canvas
            positive "y" values go down starting from the top.
          %p
            So the point (50, 100) is 50 pixels from the right of the top left corner of the canvas and
            100 pixels down from the top left corner.
          %p
            In the example below, the black square is at (0, 0) so it's top left corner
            is in the top left corner of the canvas. The blue square is at (50, 100)
            so it's top left corner is 50 pixels to the right and 100 pixels down.
          %p
            Try adjusting the coordinates of the two squares and see how they move around
            the coordinate system.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage1_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                context.fillRect(0, 0, 50, 50);

                context.fillStyle = 'blue';
                context.fillRect(50, 100, 50, 50);


            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage1_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-3{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            Draw a rectangle using the code
            %code fillRect(x, y, width, height)
            where you replace x with the top left x coordinate, y with the top left y coordinate,
            width with the width of the rectangle and height with the height of the rectangle.
          %p
            Draw the rectangle so that it's top left corner is 60px to the right of the top
            left corner of the canvas and 90px down. The rectangle should be 45px wide (width) and
            45px tall (height).

          %p In the end your drawing should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage1_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage1_challenge#{challenge_index}"}
          .alert

  - lesson_index += 1
  .lesson.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Draw The Flappy Square
          %p
            In our game our flying square will be just that, a simple square.
          %p
            In this example, we'll draw a simple square using
            = link_to_lesson('context.fillRect()', :fill_rect, nil, class: 'reference-link', data: {slug: :fill_rect})
            that is
            %span.highlight 50 pixels wide and 50 pixels tall.
            We'll position it so that its
            %span.highlight top left corner is at x = 100, y = 50: (100, 50).
          %p
            Remember: In the context's
            = link_to_lesson('coordinate system', :coordinates, nil, class: 'reference-link', data: {slug: :coordinates})
            the origin (0, 0) is at the top left corner of the canvas.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage1_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                context.fillRect(100, 50, 50, 50);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage1_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-3{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            Draw a flappy square that is
            %span.highlight 20 pixels wide and 20 pixels tall
            and position it at
            %span.highlight (50, 100).

          %p In the end your flappy square should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage1_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage1_challenge#{challenge_index}"}
          .alert

  - lesson_index += 1
  .lesson.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Use Variables to Size and Position Our Flappy Square

          %p
            Variables allow us to control the size and position of the
            flappy square more easily.
          %p
            As the flappy squares flies it will move up and down.
            %span.highlight Variables will allow us to store where it is and position it effectively.
          %p
            In this example we position the flappy bird at the position
            %span.highlight (200,50)
            by setting the assigned variables.

          = render 'lessons/relevant', relevant: [:variables, :coordinates, :fill_style, :fill_rect]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage1_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                var size = 20;
                var x = 50;
                var y = 200;

                context.fillRect(x, y, size, size);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage1_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-3{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            We can
            %span.highlight
              use
              = link_to_lesson('variables', :variables, nil, class: 'reference-link', data: {slug: :variables})
              to automatically size and position
            the flappy square.
          %p
            Setting a variable looks like this:

          %pre
            %code
              :preserve
                var x = 9;

          %p
            Our flappy square won't change in size during the game, but it will move up
            and down as we make it fly.
          %p
            Set the variables below appropriates so that the flappy bird is positioned
            at
            %span.highlight (50, 150).

          %p In the end your flappy square should look like the example provided to the right.

          = render 'lessons/relevant', relevant: [:variables, :coordinates, :fill_rect]
          = render 'lessons/code_preview', stage: 1, challenge: challenge_index - 1, editor_id: "flappy_square_stage1_challenge#{challenge_index - 1}_editor"

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage1_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            // SET THE VARIABLES PROPERLY
            var size =
            var x =
            var y =

            context.fillRect(x, y, size, size);

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage1_challenge#{challenge_index}"}
          .alert


  - lesson_index += 1
  .lesson.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Use a Function to Draw the Flappy Square
          %p
            Once we start animating out flappy square we'll want to
            draw it using a function so that we can draw it very fast in different
            locations.
          %p
            If there is a chunk of code that you are going to use over and over again,
            putting that code into a function can make your life much easier. Then,
            to run the code, all you have to do is call the function by typing one line.
          %p
            %span.highlight
              In this example, we create a function that will draw a French flag. Because
              we might want to draw a French flag in lots of different places, we make the
              x- and y-coordinates of the flag variables.
            When we call drawFrenchFlag(30, 100), the 30 is assigned to the variable <i>x</i>
            and the 100 is assigned to the variable <i>y</i> inside of the function. Now we can
            easily draw as many French flags as we want!
          = render 'lessons/relevant', relevant: [:fill_rect, :fill_style, :coordinates, :variables, :functions]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage1_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                function drawFrenchFlag(x, y) {
                  context.fillStyle = '#0055A4';
                  context.fillRect(x, y, 20, 40);

                  context.fillStyle = '#FFFFFF';
                  context.fillRect(x + 20, y, 20, 40);

                  context.fillStyle = '#EF4135';
                  context.fillRect(x + 40, y, 20, 40);
                }

                drawFrenchFlag(30, 100);
                drawFrenchFlag(150, 50);
                drawFrenchFlag(300, 180);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage1_lesson#{lesson_index}"}


  - challenge_index += 1
  .challenge.row.py-3{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.pl-2
            = image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}Example.png", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            %span.highlight
              Write a function to draw the flappy bird from
              = "Challenge #{challenge_index - 1}."
          %p
            The function will be called drawSquare() and will accept three values x, y, and size (called parameters) that
            will be used to position our flappy square.
          %p
            Then use the function to draw our flappy square at the
            %span.highlight
              coordinates (50, 100) and size 20.
          = render 'lessons/relevant', relevant: [:fill_rect, :coordinates, :variables, :functions]
          = render 'lessons/code_preview', stage: 1, challenge: challenge_index - 1, editor_id: "flappy_square_stage1_challenge#{challenge_index - 1}_editor"

      .row.pt-2
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage1_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            function drawSquare(x, y, size) {

              // YOUR CODE FOR DRAWING A SQUARE HERE

            }

            // YOUR CODE FOR CALLING THE drawSquare FUNCTION HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}.png")
            %canvas{id: "flappy_square_stage1_challenge#{challenge_index}"}
          .alert

  -#
    NEED TO BREAK THIS NEXT LESSON UP
    IDEAS:
      Break out a lesson for event listeners and the focus/blur strategy using a static drawing.


  - lesson_index += 1
  .lesson.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Basic Animation

          .float-xs-right.pl-2.pb-2
            = image_tag("lessons/flappy_square/stage1/lesson#{lesson_index}Visual.png")

          %p
            Ok, this lesson is a little long. I hope you can make your way through it.
          %p
            There are
            %span.highlight three required aspects to basic animation
            in canvas we need to cover:
          %ul
            %li Drawing frames in rapid sequence.
            %li Clearing the canvas in between frames.
            %li Making small changes to the scene in each frame.
          %p
            Drawing frames in rapid sequence can be done a number of ways.
            For our purposes we'll use the
            = link_to_lesson('setInterval() and clearInterval()', :set_interval, nil, class: 'reference-link', data: {slug: :set_interval})
            methods.
            %code setInterval()
            will call run the specified code at regular intervals.
            %code clearInterval()
            will stop those regular intervals.
          %p
            %span.highlight Important:
            In "Drawing In Code" we always call setInterval from an
            = link_to_lesson('event listener', :event_listeners, nil, class: 'reference-link', data: {slug: :event_listeners})
            An event listener allows our code
            to "listen" to an event. In this case we'll be listening for the canvas to gain focus.
            When you click on the canvas you give it focus. We also give it focus automatically
            when we run the code (this happens behind the scenes). We will also call clearInterval
            from the "blur" event on the canvas. This means that when we click away from the canvas
            the animation will stop. It also ensures that if we run the code multiple times our
            setInterval doesn't continue to run, doubling up on itself.
          %p
            Our
            %span.highlight setInterval() allows us to draw frames in rapid sequence.
            Before each frame is drawn we need to erase the canvas so that the drawings do not overlap. We use
            = link_to_lesson('clearRect()', :clear_rect, nil, class: 'reference-link', data: {slug: :clear_rect})
            like this:
            %code context.clearRect(0, 0, canvas.width, canvas.height)
            to clear a rectangle starting at the coordinates (0,0) and clearing
            an area as wide and tall as the canvas (it clears the whole canvas).
          %p
            Then we draw the next frame, slightly different from the last frame. If we
            do this frequently enough then the animation looks smooth and natural. If we
            slow it down, it looks jumpy.


          = render 'lessons/relevant', relevant: [:fill_rect, :set_interval, :event_listeners, :clear_rect, :functions]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage1_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                var direction = 'up';
                var size = 1;
                var interval;

                function drawSquare() {
                  var x = (canvas.width - size) / 2;
                  var y = (canvas.height - size) / 2;
                  context.fillRect(x, y, size, size);
                }

                function adjustSize() {
                  if (direction == 'up') {
                    size += 1;
                    if (size > 250) {
                      direction = 'down';
                    }
                  } else {
                    size -= 1;
                    if (size <= 0) {
                      direction = 'up';
                    }
                  }
                }

                function runProgram() {
                  context.clearRect(0, 0, canvas.width, canvas.height);
                  adjustSize();
                  drawSquare();
                }

                function startAnimation() {
                  interval = setInterval(runProgram, 10);
                }

                function pauseAnimation() {
                  clearInterval(interval);

                  context.font = "20px serif";
                  context.textAlign = 'center';
                  context.fillText('Click anywhere on the canvas to start animation.', canvas.width / 2, 50);
                }

                canvas.addEventListener('focus', startAnimation);
                canvas.addEventListener('blur', pauseAnimation);
                pauseAnimation();


            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage1_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-3{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.px-2
            = image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}Example.gif", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            There's a lot of new stuff in this challenge, so make sure to
            %span.highlight look at the lesson above.
            It provides explanations for the different components of this challenge.
          %p
            Use
            %span.highlight setInterval(),
            called from the canvas "focus" event, to
            %span.highlight animate the flappy square falling.
          %p
            Have your flappy square
            %span.highlight start at (50, 100) and move down 10 pixels every 300 milliseconds.
          %p
            Your animation should look like the example to the right.

          = render 'lessons/relevant', relevant: [:fill_rect, :set_interval, :event_listeners, :clear_rect, :functions]
          = render 'lessons/code_preview', stage: 1, challenge: challenge_index - 1, editor_id: "flappy_square_stage1_challenge#{challenge_index - 1}_editor"

      .row.pt-2
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage1_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var interval;
            var size = 20;

            // SET YOUR POSITION VARIABLES HERE
            var x =
            var y =

            function drawSquare() {

              // YOUR CODE FOR DRAWING A SQUARE HERE

            }

            function adjustPosition() {

              // YOUR CODE FOR CHANGING THE POSITION OF THE SQUARE HERE

            }

            function runProgram() {
              // YOUR CODE TO CLEAR THE CANVAS BEFORE DRAWING THE NEXT FRAME HERE

              adjustPosition();
              drawSquare();
            }

            function startAnimation() {

              // FILL IN THE CORRECT setInterval PARAMETERS HERE
              interval = setInterval();

            }

            function pauseAnimation() {
              clearInterval(interval);
            }

            canvas.addEventListener('focus', startAnimation);
            canvas.addEventListener('blur', pauseAnimation);



        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas{id: "flappy_square_stage1_challenge#{challenge_index}"}
          .alert


  - lesson_index += 1
  .lesson.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Gravity
          %p
            Now we need to make our flappy square fall more realistically.
          %p
            This essentially requires
            %span.highlight simulating gravity.
          %p
            Gravity causes objects on earth to move toward the center of the Earth
            at an accelerating rate, which means that they move faster and faster
            toward the ground.
          %p
            The speed of the object toward the ground is called its "velocity".
            Gravity causes the object's velocity to increase over time.
          %p
            In this examples when you click "Run" a ball will shoot out at
            a constant velocity moving right and up while gravity pulls it toward
            the ground, causing its upward velocity to decrease until it is negative
            (falling).
          %p
            In this example gravity is set to 0.4. This means that the upward speed (yVelocity)
            of our ball will decrease by 0.4 each frame. So in each frame the ball will move up
            by 0.4 pixels less than the last frame until it is no longer moving at which point
            it will move down by 0.4 pixels more each frame.
          %p
            This is an arbitrary value that simply makes the simulation look good as we're not
            actually trying to simulate gravity accurately.
          %p
            Also remember that in the canvas the "y" coordinates go up as you move down.
            This means that subtracting a negative "yVelocity" from our "y" position actually
            makes our "y" value large, drawing the ball farther down on the canvas.

          = render 'lessons/relevant', relevant: [:set_interval, :event_listeners, :clear_rect, :functions]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_lesson#{lesson_index}_editor"} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage1_lesson#{lesson_index}');
                var context = canvas.getContext('2d');

                var gravity = 0.4;
                var size = 10;
                var interval;
                var x = 0;
                var y = 0;
                var xVelocity = 0;
                var yVelocity = 0;

                function drawBall() {
                  context.beginPath();
                  context.arc(x, y, size, 0, Math.PI*2, true);
                  context.closePath();
                  context.fill();
                }

                function adjustPosition() {
                  yVelocity -= gravity;
                  x += xVelocity;
                  y -= yVelocity;
                }

                function runProgram() {
                  context.clearRect(0, 0, canvas.width, canvas.height);
                  adjustPosition();
                  drawBall();
                }

                function resetAnimation() {
                  x = 0;
                  y = canvas.height - 60;
                  xVelocity = 8;
                  yVelocity = 12;
                }

                function startAnimation() {
                  interval = setInterval(runProgram, 20);
                  resetAnimation();
                }

                function pauseAnimation() {
                  clearInterval(interval);

                  context.font = "20px serif";
                  context.textAlign = 'center';
                  context.fillText('Click anywhere on the canvas to start the animation.', canvas.width / 2, 50);
                }

                canvas.addEventListener('click', resetAnimation);
                canvas.addEventListener('focus', startAnimation);
                canvas.addEventListener('blur', pauseAnimation);
                pauseAnimation();




            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas{id: "flappy_square_stage1_lesson#{lesson_index}"}

  - challenge_index += 1
  .challenge.row.py-3{id: "challenge#{challenge_index}"}
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            = "Challenge #{challenge_index}"

          %figure.float-xs-right.px-2
            = image_tag("lessons/flappy_square/stage1/challenge#{challenge_index}Example.gif", class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small= "Challenge #{challenge_index} Sample Solution"

          %p
            Let's give our flappy square animation a more realistic simulation
            of gravity.
          %p
            Using your code from Challenge 4, instead of just moving the flappy square
            down 10 pixels each frame let's track the y velocity of the flappy
            square and with each frame let's subtract gravity to increase the velocity
            downward.
          %p
            %span.highlight
              Our flappy square should start at (50, 100) with a yVelocity of 0. Gravity
              should be set to 0.5.
            So in each frame you'll subtract gravity from yVelocity and then
            you'll subtract yVelocity to the y variable. This will cause the y variable to go down
            at an increasing rate.
          %p
            Let's also speed up our animation and instead of running a frame every 300
            miliseconds, let's
            %span.highlight draw a frame every 25 miliseconds.
          %p
            Your animation should look like the example to the right.
          %p
            Important note: In Challenge
            = challenge_index - 1
            we added 10 to the "y" variable in each frame causing the square
            to move down. Here we need to
            %span.highlight subtract "yVelocity"
            as "yVelocity" will be negative and subtracting a negative is the same
            as adding a positive (I know this can get confusing with the y-coordinate
            of the canvas moving in the wrong direction).

          = render 'lessons/relevant', relevant: [:set_interval, :event_listeners, :clear_rect, :functions]
          = render 'lessons/code_preview', stage: 1, challenge: challenge_index - 1, editor_id: "flappy_square_stage1_challenge#{challenge_index - 1}_editor"

      .row.pt-2
        = render :layout => '/lessons/editor', :locals => {:editor_id => "flappy_square_stage1_challenge#{challenge_index}_editor"} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage1_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var interval;
            var gravity = ;
            var size = 20;
            var x = ;
            var y = ;
            var yVelocity = ;

            function drawSquare() {
            }

            function adjustPosition() {
              // Instead of simply subtracting
              // 10 from the "y" variable you'll
              // need to both adjust the "yVelocity"
              // and then use it to adjust "y"
            }

            function runProgram() {
            }

            function startAnimation() {
              interval =
            }

            function pauseAnimation() {
              clearInterval(interval);
            }

            canvas.addEventListener('focus', startAnimation);
            canvas.addEventListener('blur', pauseAnimation);



        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas{id: "flappy_square_stage1_challenge#{challenge_index}"}
          .alert
