#flappy_square_stage2.lesson
  %h1 Stage 2

  .description.row.py-3
    .col-xs-6
      %h2.py-2
        Stage 2 Overview
      %p
        In this stage we'll make our flappy bird fly!
        We'll listen for the "up" key to be pressed and
        make our flappy bird fly a bit before falling
        back down.
      %p
        Then, if the bird falls outside of the game area
        we'll end the game.

    .col-xs-6
      = image_tag('lessons/flappy_square/stage2/challenge5Example.gif', class: 'img-fluid canvas-example')



  .lesson.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Responding To Key Events
          %p
            In Stage 1 we caught a glimpse of
            = link_to_lesson('event listeners', :event_listeners, nil, class: 'reference-link', data: {slug: :event_listeners})
            when we used them to start and pause our animations when the
            canvas receives or loses focus (the 'focus' and 'blur' events).
          %p
            In this example we'll use key events to move our square around the canvas.
          %p
            With key events we need to not only listen for the keydown event but also
            make sure we're listening for the right key. We do this by checking the
            keyCode on the event object that is passed to the event listener.

          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'flappy_square_stage2_lesson1_editor'} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage2_lesson1');
                var context = canvas.getContext('2d');

                var interval;
                var running = false;
                var size = 10;
                var move = 5;
                var x = 0;
                var y = 0;

                function drawSquare() {
                  context.fillRect(x, y, size, size);
                }

                function adjustPosition(e) {
                  if (running) {
                    switch (e.keyCode) {
                      case(37):
                        x -= move;
                        break;
                      case(38):
                        y -= move;
                        break;
                      case(39):
                        x += move;
                        break;
                      case(40):
                        y += move;
                        break;
                    }
                  }
                  e.preventDefault();
                }

                function runProgram() {
                  context.clearRect(0, 0, canvas.width, canvas.height);
                  drawSquare();
                }

                function startAnimation() {
                  running = true;
                  interval = setInterval(runProgram, 20);
                }

                function pauseAnimation() {
                  running = false;
                  clearInterval(interval);

                  context.font = "20px serif";
                  context.textAlign = 'center';
                  context.fillText('Click on the canvas to start the animation.', canvas.width / 2, 50);
                  context.fillText('Then use arrow keys to control the square.', canvas.width / 2, 100);
                }

                canvas.addEventListener('keydown', adjustPosition);

                canvas.addEventListener('focus', startAnimation);
                canvas.addEventListener('blur', pauseAnimation);
                pauseAnimation();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#flappy_square_stage2_lesson1


  #challenge1.challenge.row.py-3
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 1

          %figure.float-xs-right.pl-2
            = image_tag('lessons/flappy_square/stage2/challenge1Example.gif', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 1 Sample Solution

          %p
            Take your code from Stage 1 Challenge 5 and make your flappy square fly.
          %p
            %span.highlight
              Listen for the keydown event and make sure the
              'up' key is being pressed (keyCode = 38).
          %p
            When the 'up' key is pressed then set the
            %span.highlight yVelocity at 8.
            This will cause the flappy square to jump up before
            being pulled back down by gravity.
          %p
            We'll also slow down the framerate so that you have more time to
            hit the up key before the square falls off the canvas. For now
            let's set it to draw one frame every
            %span.highlight 80 miliseconds
            (this will be slow, but it will be a better framerate for testing).

          %p In the end your flappy square should behave like the example provided to the right.
          = render 'lessons/relevant', relevant: [:event_listeners]
          = render 'lessons/code_preview', stage: 1, challenge: 5, editor_id: 'flappy_square_stage1_challenge5_editor'

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'flappy_square_stage2_challenge1_editor'} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage2_challenge1');
            var context = canvas.getContext('2d');

            var interval;
            var size = 20;

            function drawSquare() {
            }

            function flap() {
            }

            function adjustPosition() {
            }

            function runProgram() {
            }

            function startAnimation() {
              interval =
            }

            function pauseAnimation() {
              clearInterval(interval);
            }

            canvas.addEventListener('focus', startAnimation);
            canvas.addEventListener('blur', pauseAnimation);

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#flappy_square_stage2_challenge1
          .alert



  .lesson.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: A Game Area
          %p
            We're going to want to create a "game area" which
            is essentially just a square drawn within the canvas
            that represents the valid area for the game to be drawn in.
          %p
            It also will allow us to display the game name and score
            above the game area later in Stage 4.
          %p
            In this example we demonstrate a drawn area that, when you
            move your mouse over if will say "In Game" and when you move
            out of it will say "Out Of Game".

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'flappy_square_stage2_lesson2_editor'} do
              :preserve
                var canvas = document.getElementById('flappy_square_stage2_lesson2');
                var context = canvas.getContext('2d');

                var minX = 50;
                var maxX = 400;
                var minY = 50;
                var maxY = 300;

                function drawBoundary() {
                  context.lineWidth = 2;
                  context.beginPath();
                  context.moveTo(minX, minY);
                  context.lineTo(minX, maxY);
                  context.lineTo(maxX, maxY);
                  context.lineTo(maxX, minY);
                  context.closePath();
                  context.stroke();
                }

                function handleMouseMove(e) {
                  context.clearRect(0, 0, canvas.width, canvas.height);

                  drawBoundary();

                  var x = e.layerX;
                  var y = e.layerY;
                  var inOut;
                  if (x > minX && x < maxX && y > minY && y < maxY) {
                   inOut = 'inside the game area.';
                  } else {
                   inOut = 'outside the game area.';
                  }
                  context.fillText('Your mouse is: ' + inOut, minX, 25);
                }

                canvas.addEventListener('mousemove', handleMouseMove);

                context.font = "20px serif";
                context.fillText('Mouse over the canvas.', minX, 25);
                drawBoundary();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#flappy_square_stage2_lesson2


  #challenge2.challenge.row.py-3
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 2

          %figure.float-xs-right.pl-2
            = image_tag('lessons/flappy_square/stage2/challenge2Example.gif', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 2 Sample Solution

          %p
            Let's take the code from Challenge 1 and add a boundary for our game.
          %p
            The boundary should
            %span.highlight start at (25, 25) and extend to (300, 450),
            forming a rectangle.
          %p
            Then let's track whether our flappy square has fallen outside of our
            boundary. When it goes above the maximum y value for the boundary
            (remember y values are larger at the bottom of the canvas) we'll
            stop the game and display a message.
          %p
            We'll also start organizing our variables into hashes which allow us to
            reference variables more easily. Here's an example:
          %pre
            %code
              :preserve
                var rectangle = {
                  height: 10,
                  width: 20
                }

                rectangle.width
                => 20

          %p In the end your flappy square should behave like the example provided to the right.
          = render 'lessons/relevant', relevant: [:line_to, :event_listeners]
          = render 'lessons/code_preview', stage: 2, challenge: 1, editor_id: 'flappy_square_stage2_challenge1_editor'

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'flappy_square_stage2_challenge2_editor'} do
          :preserve
            var canvas = document.getElementById('flappy_square_stage2_challenge2');
            var context = canvas.getContext('2d');

            var interval;

            // FILL IN YOUR VARIABLES USING THIS HASH FORMAT HERE.
            var square = {
              size: 20,
              x: ,
              y: ,
              jump: ,
              yVelocity:
            };

            var boundary = {
              minX: ,
              minY: ,
              maxX: ,
              maxY:
            };
            var gravity = 0.5;

            function drawBoundary() {

              // Draw your boundary using boundary.minX, boundary.minY, etc. here.

            }

            function drawSquare() {
            }

            function flap(e) {
            }

            function adjustPosition() {
            }

            function checkBoundary() {

              // CODE TO CHECK WHETHER FLAPPY SQUARE
              // IS ABOVE BOUNDARY FLOOR HERE.
              if () {
                pauseAnimation();
                context.font = "20px serif";
                context.textAlign = 'center';

                var xCenter = ((boundary.maxX - boundary.minX) / 2) + boundary.minX;
                var yCenter = ((boundary.maxY - boundary.minY) / 2) + boundary.minY;
                context.fillText('Game Over', xCenter, yCenter);
                context.fillText('Game Over', xCenter, yCenter);
              }

            }

            function runProgram() {

              // Don't forget to draw your boundary!


            }

            function startAnimation() {
              interval =
            }

            function pauseAnimation() {
              clearInterval(interval);
            }

            canvas.addEventListener('focus', startAnimation);
            canvas.addEventListener('blur', pauseAnimation);

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#flappy_square_stage2_challenge2
          .alert
