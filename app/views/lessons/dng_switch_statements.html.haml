#dng_switch_statements.page
  %h1
    Switch Statements
  .description.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Overview
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_switch_statements/overviewVisual1.png', class: 'img-fluid')
          %p
            A switch statement is used to run different code blocks depending on the
            value of an expression.
          %pre
            %code
              :preserve
                switch (theExpression) {
                  case valueA:
                    // Code block if theExpression === valueA
                    break;
                  
                  case valueB:
                    // Code block if theExpression === valueB
                    break;
                  
                  case valueC:
                    // Code block if theExpression === valueC
                    break;
                  
                  default:
                    // Code block if theExpression doesn't match any cases
                    break;
                }
          %p
            At the top of the switch statement,
            %code
              theExpression
            is evaluated. The value of
            %code
              theExpression
            is then compared to the value in each case. The switch statement uses strict
            comparison
            %span
              (
              %code><
                \===
              ),
            which means the values must be of the same type. Visit the lesson on
            = link_to_lesson('variables', :dng_variables, nil, class: 'reference-link', data: {slug: :dng_variables})
            to learn more about data types and loose typing.
          %p
            The switch statement runs the first code block where the comparison is true. The
            break statement, which is optional, tells the program to exit the switch statement
            at the end of the code block. If none of the cases are true, then the switch statement
            runs the code block for the default case.


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Use Cases to Draw Different Messages
          %p
            In this example, we compare the value stored in the variable
            %code
              option
            to select which message to draw. If
            %span
              %code>
                option === 0
              ,
            then the code block in
            %code
              case 0
            is run and we draw the message "You chose option 0."
          
            Change the value assigned to the variable
            %code
              option
            to a different number between 0-4 to see what the code in those other cases does.
          %p
            To learn more about variables, visit the
            = link_to_lesson('Variables', :dng_variables, nil, class: 'reference-link', data: {slug: :dng_variables})
            lesson.
          = render 'lessons/relevant', relevant: [:dng_coordinates, :dng_variables, :dng_fill_style]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_switch_statements_example1_editor'} do
              :preserve
                var canvas = document.getElementById('dng_switch_statements_example1');
                var context = canvas.getContext('2d');
                
                var option = 0; // Assign option a number from 0-4

                switch (option) {
                  case 0:
                    context.font = '16px Arial';
                    context.fillStyle = 'Black';
                    context.fillText('You chose option 0.', 20, 40);
                    break;

                  case 1:
                    context.font = '24px Arial';
                    context.fillStyle = 'Crimson';
                    context.fillText('Yay! Option 1!', 200, 200);
                    break;

                  case 2:
                    context.font = '36px Arial';
                    context.fillStyle = 'DarkMagenta';
                    context.fillText('Groovy, man. Option 2.', 80, 160);
                    break;

                  case 3:
                    context.font = 'bold 48px Arial';
                    context.fillStyle = 'DeepPink';
                    context.strokeStyle = 'DarkSlateBlue';
                    context.lineWidth = 4;
                    context.textAlign = 'center';
                    context.translate(220, 150);
                    context.rotate(-Math.PI / 9);
                    context.strokeText('Wow! Option 3!', 0, 0);
                    context.fillText('Wow! Option 3!', 0, 0);
                    break;

                  case 4:
                    context.font = 'bold 48px Arial';
                    context.fillStyle = 'SeaGreen';
                    context.translate(10, 120);
                    context.fillText('MIRROR OPTION 4', 0, 0);
                    context.scale(1, -3);
                    var gradient = context.createLinearGradient(0,0,0,-32);
                    gradient.addColorStop(0,'rgba(0, 0, 0, 1)');
                    gradient.addColorStop(1,'rgba(0, 0, 0, 0)');
                    context.fillStyle = gradient;
                    context.fillText('MIRROR OPTION 4', 0, 0);
                    break;
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_switch_statements_example1


  #challenge1.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 1
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_switch_statements/challenge1Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Your switch statement should draw one of these rectangles
          %p
            The switch statement below uses the value assigned to the variable
            %code
              rectangleType
            to select which type of rectangle to draw.
          %p
            If
            %span
              %code>
                rectangleType === 'A'
              ,
            then draw a rectangle with a width of 45 and height of 100 at the position (20, 20) filled with the color
            %span
              %code>
                'Red'
              \.
          %p
            If
            %span
              %code>
                rectangleType === 'B'
              ,
            then draw a rectangle with a width of 45 and height of 100 at the position (75, 20) filled with the color
            %span
              %code>
                'Yellow'
              \.
          %p
            If
            %span
              %code>
                rectangleType === 'C'
              ,
            then draw a rectangle with a width of 100 and height of 100 at the position (20, 130) filled with the color
            %span
              %code>
                'Green'
              \.
          %p
            If
            %span
              %code>
                rectangleType === 'D'
              ,
            then draw a rectangle with a width of 100 and height of 210 at the position (130, 20) filled with the color
            %span
              %code>
                'Blue'
              \.
          %p
            Change the value assigned to the variable
            %code>
              rectangleType
            to draw each of the four rectangles. The switch statement should only draw one
            rectangle at a time. If your program seems to be working, mark the challenge as
            complete by selecting "Yes, it looks good".
          %p
            If you need help setting fill colors and drawing rectangles, visit the
            = link_to_lesson('fillStyle', :dng_fill_style, nil, class: 'reference-link', data: {slug: :dng_fill_style})
            and
            = link_to_lesson('fillRect()', :dng_fill_rect, nil, class: 'reference-link', data: {slug: :dng_fill_rect})
            lessons.
          = render 'lessons/relevant', relevant: [:dng_coordinates, :dng_variables, :dng_fill_rect, :dng_fill_style]

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_switch_statements_challenge1_editor'} do
          :preserve
            var canvas = document.getElementById('dng_switch_statements_challenge1');
            var context = canvas.getContext('2d');

            var rectangleType = 'A';
            
            switch (rectangleType) {
              
              // ADD CASES IN HERE
              
            }

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_switch_statements/challenge1.png')
            %canvas#dng_switch_statements_challenge1
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Include a Default Case
          %p
            In this example, we use a switch statement to change the expression on
            Rectangle Man's face.
          %p
            Change the value of the parameter
            %code
              expression
            to 'happy', 'angry', or 'scared' to see Rectangle Man's expression change.
            Note that those values are text strings, and the case values are also text
            strings to match. If we enter
            %span
              %code>
                drawFace(happy)
              ,
            he won't be happy. We have to enter
            %span
              %code>
                drawFace('happy')
              \.
          %p
            We have also included a default case at the bottom of the switch statement.
            If we enter an expression that Rectangle Man doesn't recognize, such as
            %span
              %code>
                drawFace('sad')
              ,
            the switch statement runs the default code black. This is useful because,
            if we enter
            %code
              drawFace()
            with no value for
            %span
              %code>
                expression
              ,
            we get Rectangle Man's default expression.
          %p
            To learn more about functions and variables, visit the
            = link_to_lesson('Function', :dng_functions, nil, class: 'reference-link', data: {slug: :dng_functions})
            and
            = link_to_lesson('Variables', :dng_variables, nil, class: 'reference-link', data: {slug: :dng_variables})
            lessons.
          = render 'lessons/relevant', relevant: [:dng_coordinates, :dng_variables, :dng_functions, :dng_fill_rect, :dng_fill_style, :dng_save, :dng_translate]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_switch_statements_example2_editor'} do
              :preserve
                var canvas = document.getElementById('dng_switch_statements_example2');
                var context = canvas.getContext('2d');
                
                context.translate(200, 20);
                drawFace('happy'); // Change Rectangle Man's expression to 'happy', 'angry', 'scared', or none

                function drawFace(expression) {
                  context.save();
                  context.fillStyle = '#000000';
                  context.strokeStyle = '#000000';
                  context.strokeRect(-80, 0, 160, 280); // Draw head
                  context.strokeRect(-15, 120, 30, 60); // Draw nose
                  context.strokeRect(15, 160, 10, 20); // Draw right nostril
                  context.strokeRect(-25, 160, 10, 20); // Draw left nostril

                  switch (expression) {
                    case 'happy':
                      context.strokeRect(20, 80, 30, 30);
                      context.fillRect(29, 89, 12, 12);
                      context.strokeRect(-50, 80, 30, 30);
                      context.fillRect(-41, 89, 12, 12);
                      context.strokeRect(-45, 200, 90, 30);
                      for (var i = 0; i < 6; i = i + 1) {
                        context.strokeRect(-45 + 15 * i, 200, 15, 15);
                        context.strokeRect(-45 + 15 * i, 215, 15, 15);
                      }
                      break;

                    case 'angry':
                      context.strokeRect(15, 90, 40, 10);
                      context.fillRect(25, 90, 10, 10);
                      context.strokeRect(-55, 90, 40, 10);
                      context.fillRect(-35, 90, 10, 10);
                      context.strokeRect(-40, 200, 80, 10);
                      break;

                    case 'scared':
                      context.strokeRect(20, 75, 30, 40);
                      context.fillRect(28, 88, 14, 14);
                      context.strokeRect(-50, 75, 30, 40);
                      context.fillRect(-42, 88, 14, 14);
                      context.strokeRect(-25, 200, 50, 60);
                      break;

                    default:
                      context.strokeRect(20, 80, 30, 30);
                      context.fillRect(30, 90, 10, 10);
                      context.strokeRect(-50, 80, 30, 30);
                      context.fillRect(-40, 90, 10, 10);
                      context.strokeRect(-30, 200, 60, 20);
                      break;
                  }

                  context.restore();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_switch_statements_example2


  #challenge2.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 2
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_switch_statements/challenge2Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            The
            %code
              drawFlag()
            function uses three parameters
            %span
              (
              %code><
                x
              ,
            %span
              %code>
                y
              ,
            and
            %span
              %code>
                country
              )
            to draw a flag at the position
            %span
              (
              %code><
                x
              ,
            %span
              %code>
                y
              ).
            Create a switch statement inside the function so it draws a French flag if
            %span
              %code>
                country === 'France'
              ,
            a Colombian flag if
            %span
              %code>
                country === 'Colombia'
              ,
            or a simple white flag if
            %code
              country
            is undefined or has some other value.
          %p
            Then, use the
            %code
              drawFlag()
            function to draw a French flag at (200, 10), a Colombian flag at (10, 90),
            and a white flag at (200, 170).
          %p
            To draw a French flag, use:
          %pre
            %code
              :preserve
                context.fillStyle = '#0055A4';
                context.fillRect(0, 0, 60, 120);
                context.fillStyle = '#FFFFFF';
                context.fillRect(60, 0, 60, 120);
                context.fillStyle = '#EF4135';
                context.fillRect(120, 0, 60, 120);
          %p
            To draw a Colombian flag, use:
          %pre
            %code
              :preserve
                context.fillStyle = '#FCD116';
                context.fillRect(0, 0, 180, 60);
                context.fillStyle = '#003893';
                context.fillRect(0, 60, 180, 30);
                context.fillStyle = '#CE1126';
                context.fillRect(0, 90, 180, 30);
          %p
            To draw a white flag, use:
          %pre
            %code
              :preserve
                context.fillStyle = '#FFFFFF';
                context.fillRect(0, 0, 180, 120);

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_switch_statements_challenge2_editor'} do
          :preserve
            var canvas = document.getElementById('dng_switch_statements_challenge2');
            var context = canvas.getContext('2d');
            
            // DRAW THE FRENCH FLAG AT (200, 10) HERE
            // DRAW THE COLOMBIAN FLAG AT (10, 90) HERE
            // DRAW THE WHITE FLAG AT (200, 170) HERE
            
            function drawFlag(x, y, country) {
              context.save();
              context.translate(x, y);
              
              // CREATE THE SWITCH STATEMENT TO DRAW THE FRENCH, COLOMBIAN, OR WHITE FLAG HERE
              
              context.restore();
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_switch_statements/challenge2.png')
            %canvas#dng_switch_statements_challenge2
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Chain Together the Code in Multiply Cases
          %p
            A break statement tells the program to exit a switch statement at the end
            of a code block. If there is no break statement at the end of a code block,
            the program continues to run the code in the next code block.
          %p
            In this example, we use a switch statement to draw Rectangle Man's face
            with some bling. Try passing values from 0 (no bling) to 4 (max bling) into the
            %code
              drawFaceWithBling()
            function to see how Rectangle Man's bling changes.
          %p
            Because we are not ending the code blocks in each case with a break statement,
            the program does not exit the switch statement when the code block is done.
            For example, if we pass a value of 2 into the parameter
            %span
              %code>
                bling
              ,
            then
            case 2 in the switch statement will be true, and the program will run that code
            block. But when that code block is over, the program will continue running the code
            in the code blocks below, even if those cases are false, until it reaches a break
            statement or the switch statement ends.
          %p
            By leaving out the break statements for each case, Rectangle Man gets the bling
            from both case 2 and case 1 if we pass the
            %code
              bling
            parameter a value of 2, and he gets all the bling if we pass the
            %code
              bling
            parameter a value of 4.
          = render 'lessons/relevant', relevant: [:dng_coordinates, :dng_variables, :dng_functions, :dng_fill_rect, :dng_fill_style, :dng_save, :dng_translate]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_switch_statements_example3_editor'} do
              :preserve
                var canvas = document.getElementById('dng_switch_statements_example3');
                var context = canvas.getContext('2d');
                
                context.translate(200, 50);
                drawFaceWithBling(0); // Give Rectangle Man some bling (0-4);

                function drawFaceWithBling(bling) {
                  context.save();
                  context.fillStyle = '#000000';
                  context.strokeStyle = '#000000';
                  context.strokeRect(-64, 0, 128, 224);
                  context.strokeRect(-12, 96, 24, 48);
                  context.strokeRect(12, 128, 8, 16);
                  context.strokeRect(-20, 128, 8, 16);
                  context.strokeRect(16, 64, 24, 24);
                  context.fillRect(24, 72, 8, 8);
                  context.strokeRect(-40, 64, 24, 24);
                  context.fillRect(-32, 72, 8, 8);
                  context.strokeRect(-24, 160, 48, 16);
                  context.strokeRect(64, 80, 12, 30);
                  context.strokeRect(-76, 80, 12, 30);

                  switch (bling) {
                    case 4: // Draw necklace
                      context.save();
                      context.translate(0, 132);
                      context.fillStyle = '#EECC00';
                      context.fillRect(-16, 104, 32, 60);
                      context.rotate(-Math.PI / 5);
                      for (var i = 0; i < 9; i = i + 1) {
                        context.fillRect(-8, 114, 16, 40);
                        context.rotate(Math.PI / 20);
                      }
                      context.restore();

                    case 3: // Draw earring
                      context.save();
                      context.fillStyle = '#EECC00';
                      context.fillRect(-76, 110, 8, 8);
                      context.fillRect(-76, 120, 8, 8);
                      context.fillRect(-76, 130, 8, 8);
                      context.fillRect(-77, 140, 10, 16);
                      context.restore();

                    case 2: // Draw hat
                      context.save();
                      context.fillRect(-68, -40, 136, 88);
                      context.fillRect(-88, 40, 176, 8);
                      context.fillStyle = 'FireBrick';
                      context.fillRect(-68, 16, 136, 24);
                      context.restore();

                    case 1: // Draw sunglasses
                      context.save();
                      context.fillRect(-72, 72, 144, 8);
                      context.fillStyle = '#660000';
                      context.fillRect(2, 64, 56, 24);
                      context.fillRect(-58, 64, 56, 24);
                      context.restore();
                  }

                  context.restore();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_switch_statements_example3


  #challenge3.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 3
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_switch_statements/challenge3Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Right now, the
            %code
              drawRedDoor()
            function uses two parameters to draw a red door at the position
            %span
              (
              %code><
                x
              ,
            %span
              %code>
                y
              ).
          %p
            Re-write the function so it accepts a third parameter,
            %span
              %code>
                detailLevel
              \.
            Draw the door's red rectangle first. Then, add the door knob if the
            %code
              detailLevel
            is greater than or equal to 1, the door's window if it is greater than or equal
            to 2, and the mail slot if it is equal to 3.
          %p
            Draw a red door with
            %code
              detailLevel === 1
            at (10, 20),
            %code
              detailLevel === 2
            at (140, 20), and
            %code
              detailLevel === 3
            at (270, 20).

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_switch_statements_challenge3_editor'} do
          :preserve
            var canvas = document.getElementById('dng_switch_statements_challenge3');
            var context = canvas.getContext('2d');

            drawRedDoor(10, 20);
            drawRedDoor(140, 20);
            drawRedDoor(270, 20);
            
            function drawRedDoor(x, y) {
              context.save();
              context.translate(x, y);
              context.fillStyle = '#FF0000';
              context.fillRect(0, 0, 120, 240); // Red rectangle
              context.fillStyle = '#99CCFF';
              context.fillRect(20, 20, 80, 60); // Window
              context.fillStyle = '#FFD700';
              context.fillRect(90, 120, 16, 16); // Door knob
              context.fillRect(40, 180, 40, 16); // Mail slot
              context.restore();
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_switch_statements/challenge3.png')
            %canvas#dng_switch_statements_challenge3
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Handle keydown Events
          %p
            In this example, we use a switch statement to handle
            %code
              keydown
            events. Select the canvas below by clicking on it. Then, use the arrow
            or WASD keys to move the square on the canvas.
          %p
            There is a lot happening in this example, but the part of the program we want
            to focus on is the
            %code
              moveSquare()
            function, which is registered to listen for
            %code
              keydown
            events on the canvas.
          %pre
            %code
              :preserve
                canvas.addEventListener('keydown', moveSquare);
          %p
            If a key is pressed down while the canvas is selected, a
            %code
              keydown
            event is generated and passed into the
            %code
              moveSquare()
            function, where it is then stored in the parameter
            %span
              %code>
                e
              \.
          %pre
            %code
              :preserve
                function moveSquare(e) {
                  switch (e.keyCode) {
                    case 37:
                    case 65:
                      x -= 10; // Left
                      break;
                    
                    case 38:
                    case 87:
                      y -= 10; // Up
                      break;
                    
                    case 39:
                    case 68:
                      x += 10; // Right
                      break;
                    
                    case 40:
                    case 83:
                      y += 10; // Down
                      break;
                  }
                  
                  drawSquare();
                  e.preventDefault();
                }
          %p
            Inside the
            %code
              moveSquare()
            function, we can identify the key that was pressed by accessing the
            %code
              keydown
            event's
            %code
              keyCode
            property. We use a switch statement to move the square to the left by subtracting 10
            from it's x-coordinate if the left arrow
            %span
              (
              %code><
                e.keyCode === 37
              )
            or the a-key
            %span
              (
              %code><
                e.keyCode === 65
              )
            has been pressed, and we move the square to the right by adding 10 if the right arrow
            %span
              (
              %code><
                e.keyCode === 39
              )
            or the d-key
            %span
              (
              %code><
                e.keyCode === 68
              )
            has been pressed. Note that if
            %span
              %code>
                e.keyCode === 37
              ,
            the code block for
            %code
              e.keyCode === 65
            runs because there is no break statement between them. Finally, we redraw the square at its new position using the
            %code
              drawSquare()
            function. Here is a list of
            %span
              %span><
                = link_to('keyCode values', 'https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode', target: '_blank')
              \.
          %p
            To learn more about handling events, visit the
            addEventListener()
            lesson.
          = render 'lessons/relevant', relevant: [:dng_coordinates, :dng_functions, :dng_fill_rect, :dng_fill_style, :dng_save]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_switch_statements_example4_editor'} do
              :preserve
                var canvas = document.getElementById('dng_switch_statements_example4');
                var context = canvas.getContext('2d');
                
                var x = 50;
                var y = 50;
                
                canvas.addEventListener('blur', pause);
                canvas.addEventListener('focus', play);
                canvas.addEventListener('keydown', moveSquare);
                
                pause();
                
                function moveSquare(e) {
                  switch (e.keyCode) {
                    case 37:
                    case 65:
                      x -= 10; // Left
                      break;
                    
                    case 38:
                    case 87:
                      y -= 10; // Up
                      break;
                    
                    case 39:
                    case 68:
                      x += 10; // Right
                      break;
                    
                    case 40:
                    case 83:
                      y += 10; // Down
                      break;
                  }
                  
                  drawSquare();
                  e.preventDefault();
                }
                
                function drawSquare() {
                  context.save();
                  context.clearRect(0, 0, canvas.width, canvas.height);
                  context.fillStyle = 'Orange';
                  context.fillRect(x, y, 40, 40);
                  context.restore();
                }
                
                function play() {
                  drawSquare();
                  
                  context.save();
                  context.font = '16px Arial';
                  context.textAlign = 'center';
                  context.fillStyle = 'Black';
                  context.fillText('Use the arrow or WASD keys to move the square', canvas.width / 2, canvas.height / 2);
                  context.restore();
                }
                
                function pause() {
                  drawSquare();
                  
                  context.save();
                  context.font = '16px Arial';
                  context.textAlign = 'center';
                  context.fillStyle = 'Black';
                  context.fillText('Click to select the canvas', canvas.width / 2, canvas.height / 2);
                  context.restore();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_switch_statements_example4


  #challenge4.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 4
          %p
            Inside the
            %code
              setColor()
            function, add a switch statement that will change the color of the square
            depending on the key pressed.
          %p
            Assign the
            %code
              context.fillStyle
            property the color
            %code
              'Red'
            if the r-key is pressed (keyCode 82), the color
            %code
              'Orange'
            if the o-key is pressed (keyCode 79), the color
            %code
              'Yellow'
            if the y-key is pressed (keyCode 89), the color
            %code
              'Green'
            if the g-key is pressed (keyCode 71), the color
            %code
              'Blue'
            if the b-key is pressed (keyCode 66), the color
            %code
              'Indigo'
            if the i-key is pressed (keyCode 73), and the color
            %code
              'Violet'
            if the v-key is pressed (keyCode 86).
          %p
            All you have to do is add the switch statement. The rest of the program
            has been set up for you.
          %p
            Try changing the color of the square by pressing the ROYGBIV keys. If your
            program seems to be working, mark the challenge as complete by selecting "Yes, it looks good".

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_switch_statements_challenge4_editor'} do
          :preserve
            var canvas = document.getElementById('dng_switch_statements_challenge4');
            var context = canvas.getContext('2d');

            canvas.addEventListener('blur', pause);
            canvas.addEventListener('focus', play);
            canvas.addEventListener('keydown', setColor);
            
            context.fillStyle = 'Green';
            pause();
            
            function setColor(e) {
              
              // ADD SWITCH STATEMENT HERE
              
              drawSquare();
              e.preventDefault();
            }
            
            function drawSquare() {
              context.save();
              context.clearRect(0, 0, canvas.width, canvas.height);
              context.translate(canvas.width / 2 - 120, canvas.height / 2 - 120);
              context.fillRect(0, 0, 240, 240);
              context.restore();
            }
                
            function play() {
              drawSquare();
              
              context.save();
              context.font = '16px Arial';
              context.textAlign = 'center';
              context.fillStyle = 'Black';
              context.fillText('Use the ROYGBIV keys to change the color of the square', canvas.width / 2, canvas.height / 2);
              context.restore();
            }
            
            function pause() {
              drawSquare();
              
              context.save();
              context.font = '16px Arial';
              context.textAlign = 'center';
              context.fillStyle = 'Black';
              context.fillText('Click to select the canvas', canvas.width / 2, canvas.height / 2);
              context.restore();
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#dng_switch_statements_challenge4
          .alert
