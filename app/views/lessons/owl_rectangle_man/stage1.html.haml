#owl_rectangle_man_stage1.page
  %h1
    Stage 1
  .description.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Overview
          %figure.float-xs-right.px-2
            = image_tag('lessons/owl_rectangle_man/stage1/overviewVisual1.png', class: 'img-fluid')
          %p
            These lessons show you how to create your own storybook.
          %p
            In the first stage, we draw a scene featuring our main characters, Owl and
            Rectangle Man, sitting and talking at home in their kitchen.

  #section1.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            The Coordinate System
          %figure.float-xs-right.px-2
            = image_tag('lessons/owl_rectangle_man/stage1/exampleVisual1.png', class: 'img-fluid')
          %p
            When drawing on a canvas, the canvas's context uses a coordinate system to
            position lines, rectangles, and other shapes on the canvas.
          %p
            By default, the origin (0, 0) of the context's coordinate system is the top
            left corner of the canvas. The x-coordinate is the distance of a point from the
            origin moving to the right and the y-coordinate is the distance from the origin
            moving down.
          %p
            For example, the point (80, 50) is 80 pixels to the right of the origin and 50
            pixels down.
          %p
            To see the coordinates of a point on the canvas, mouse over the gray area in
            the canvas to the right. To learn more about the coordinate system, visit the
            = link_to_lesson('Coordinates', :coordinates, nil, class: 'reference-link', data: {slug: :coordinates})
            lesson.
          = render 'lessons/relevant', relevant: [:coordinates]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_example1_editor'} do
              :preserve
                var canvas = document.getElementById('owl_rectangle_man_stage1_example1');
                var context = canvas.getContext('2d');

                context.font= '16px Arial';
                context.textBaseline = 'middle';
                context.fillStyle = '#000000';

                canvas.addEventListener('mouseout', function(e) {
                  context.clearRect(0, 0, canvas.width, canvas.height);
                });

                canvas.addEventListener('mousemove', function(e) {
                  context.clearRect(0, 0, canvas.width, canvas.height);
                  context.beginPath();
                  context.arc(e.layerX, e.layerY, 3, 0, 2 * Math.PI, false);
                  context.closePath();
                  context.fill();
                  var text = '(' + e.layerX + ', ' + e.layerY + ')';
                  context.fillText(text, e.layerX + 5, e.layerY);
                });

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#owl_rectangle_man_stage1_example1

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw a Black Rectangle
          %p
            The <code>context.fillRect()</code> method draws a filled rectangle on
            the canvas by passing it four values:
          %pre
            %code
              :preserve
                context.fillRect(x, y, width, height);
          %p
            This programs the context to draw a rectangle at the coordinates (<code>x</code>,
            <code>y</code>) with the given <code>width</code> and <code>height</code> values.
          %p
            In this example, we draw a black rectangle at (50, 100) with a width of
            200 and a height of 80.
          %pre
            %code
              :preserve
                context.fillRect(50, 100, 200, 80);
          %p
            Change the x- and y-coordinates to move the rectangle on the canvas. Change
            the width and height to change the size of the rectangle. To learn more about
            drawing rectangles, visit the
            = link_to_lesson('fillRect()', :fill_rect, nil, class: 'reference-link', data: {slug: :fill_rect})
            lesson.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_example2_editor'} do
              :preserve
                var canvas = document.getElementById('owl_rectangle_man_stage1_example2');
                var context = canvas.getContext('2d');
                
                context.fillRect(50, 100, 200, 80);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                .background.hidden-xl-down= image_tag('lessons/owl_rectangle_man/stage1/example2.png')
                %canvas#owl_rectangle_man_stage1_example2

  #challenge1.challenge.row.py-4
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 1
          %figure.float-xs-right.px-2
            = image_tag('lessons/owl_rectangle_man/stage1/challenge1Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Use the <code>context.fillRect()</code> method to draw a rectangle at the
            coordinates (80, 40) with a width of 240 and a height of 160. It should cover
            the gray rectangle pre-drawn on the canvas.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_challenge1_editor'} do
          :preserve
            var canvas = document.getElementById('owl_rectangle_man_stage1_challenge1');
            var context = canvas.getContext('2d');
            
            // Draw a rectangle at (80, 40) with a width of 240 and a height of 160

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/owl_rectangle_man/stage1/challenge1.png')
            %canvas#owl_rectangle_man_stage1_challenge1
          .alert

  #section2.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Fill a Rectangle with a Color
          %p
            While the default fill color is black, we can set the <code>context.fillStyle</code>
            property to fill our rectangles with other colors.
          %p
            In this example, we set the <code>context.fillStyle</code> property to the color
            <code>'DodgerBlue'</code> before filling a rectangle at (100, 60) with a width of 120
            and a height of 200.
          %pre
            %code
              :preserve
                context.fillStyle = 'DodgerBlue';
                context.fillRect(100, 60, 120, 200);
          %p
            There are several different ways to define a color. The easiest is using a color
            name, such as <code>'DodgerBlue'</code>. But only 141 colors have official names.
            By using hex triplets or RGB values, we can define over 16 million colors
            (<code>'DodgerBlue'</code> is <code>'#1E90FF'</code> or <code>'rgb(30, 144, 255)'</code>),
            and we can even make colors partially transparent (<code>'rgba(30, 144, 255, 0.5)'</code>).
          %p
            Here is a full list of
            %span
              %span><
                = link_to('HTML5 color names', 'http://www.rapidtables.com/web/color/html-color-codes.htm', target: '_blank')
              ,
            a list of
            %span
              %span><
                = link_to('common hex triplets', 'http://www.rapidtables.com/web/color/Web_Safe.htm', target: '_blank')
              ,
            and a tool for finding
            %span
              %span><
                = link_to('RGB values', 'http://www.rapidtables.com/web/color/RGB_Color.htm', target: '_blank')
              \.
            To learn more about defining fill colors, visit the
            = link_to_lesson('fillStyle', :fill_style, nil, class: 'reference-link', data: {slug: :fill_style})
            lesson.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect, :fill_style]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_example3_editor'} do
              :preserve
                var canvas = document.getElementById('owl_rectangle_man_stage1_example3');
                var context = canvas.getContext('2d');

                context.fillStyle = 'DodgerBlue';
                context.fillRect(100, 60, 120, 200);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#owl_rectangle_man_stage1_example3

  #challenge2.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 2
          %figure.float-xs-right.px-2
            = image_tag('lessons/owl_rectangle_man/stage1/challenge2Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Fill one rectangle with the color <code>'#660099'</code> at (60, 40) with a
            width of 100 and height of 80. Fill a second rectangle with the color
            <code>'rgb(255, 153, 51)'</code> at (20, 160) with a width of 300 and height of 120.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect, :fill_style]

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_challenge2_editor'} do
          :preserve
            var canvas = document.getElementById('owl_rectangle_man_stage1_challenge2');
            var context = canvas.getContext('2d');

            // Set the fill color to '#660099'
            // Fill a rectangle at (60, 40) with a width of 100 and height of 80
            
            // Set the fill color to 'rgb(255, 153, 51)'
            // Fill a rectangle at (20, 160) with a width of 300 and height of 120

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/owl_rectangle_man/stage1/challenge2.png')
            %canvas#owl_rectangle_man_stage1_challenge2
          .alert

  #section3.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Use Draw Order to Layer Rectangles
          %p
            If we draw two rectangles which overlap, the second rectangle is drawn on top of
            the first rectangle. We can use this effect to create fun drawings just using rectangles.
          %p
            In this example, we start drawing Rectangle Man's head by layering five rectangles
            filled with two different colors.
          %p
            There are a couple of things to notice. First, since the neck and face are both the
            same color, we only need to set the <code>context.fillStyle</code> property once before
            filling both rectangles. Second, we are drawing both ears with one rectangle.
          %p
            To see an individual rectangle, hide the other four rectangles by using double
            slashes (<code>&frasl;&frasl;</code>) to comment out those lines of code. For example, to
            see only the ears, comment out the neck, face, nose, and nostrils:
          %pre
            %code
              :preserve
                context.fillStyle = '#CCAA77';
                context.fillRect(72, 130, 136, 40); // Ears
                
                context.fillStyle = '#DDBB88';
                // context.fillRect(100, 80, 80, 200); // Neck
                // context.fillRect(80, 80, 120, 160); // Face
                
                context.fillStyle = '#CCAA77';
                // context.fillRect(130, 150, 20, 40); // Nose
                // context.fillRect(126, 174, 28, 16); // Nostrils
          %p
            Then, try adding the rectangles back in one at a time to see how they layer.
            To learn more about setting fill colors and layering rectangles, visit the
            = link_to_lesson('fillStyle', :fill_style, nil, class: 'reference-link', data: {slug: :fill_style})
            and
            = link_to_lesson('fillRect()', :fill_rect, nil, class: 'reference-link', data: {slug: :fill_rect})
            lessons.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect, :fill_style]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_example4_editor'} do
              :preserve
                var canvas = document.getElementById('owl_rectangle_man_stage1_example4');
                var context = canvas.getContext('2d');

                context.fillStyle = '#CCAA77';
                context.fillRect(72, 130, 136, 40); // Ears
                
                context.fillStyle = '#DDBB88';
                context.fillRect(100, 80, 80, 200); // Neck
                context.fillRect(80, 80, 120, 160); // Face
                
                context.fillStyle = '#CCAA77';
                context.fillRect(130, 150, 20, 40); // Nose
                context.fillRect(126, 174, 28, 16); // Nostrils

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#owl_rectangle_man_stage1_example4

  #challenge3.challenge.row.pt-2.pb-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 3
          %figure.float-xs-right.px-2
            = image_tag('lessons/owl_rectangle_man/stage1/challenge3Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Our version of Rectangle Man's face
          %p
            Complete Rectangle Man's face by drawing in his eyes and mouth with rectangles.
            We used the color <code>'White'</code> for the whites of his eyes, the color
            <code>'#6699FF'</code> for his pupils, and the color <code>'#994444'</code> for
            his lips. But feel free to get creative. Can you draw his eyes and mouth so he
            looks angry, sad, or surprised?
          %p
            Once you are satisfied with your drawing, mark the challenge as complete by selecting "Yes, it looks good".
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect, :fill_style]

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_challenge3_editor'} do
          :preserve
            var canvas = document.getElementById('owl_rectangle_man_stage1_challenge3');
            var context = canvas.getContext('2d');

            context.fillStyle = '#CCAA77';
            context.fillRect(72, 130, 136, 40); // Ears
            
            context.fillStyle = '#DDBB88';
            context.fillRect(100, 80, 80, 200); // Neck
            context.fillRect(80, 80, 120, 160); // Face
            
            context.fillStyle = '#CCAA77';
            context.fillRect(130, 150, 20, 40); // Nose
            context.fillRect(126, 174, 28, 16); // Nostrils
            
            // Draw eyes
            // Draw mouth

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/owl_rectangle_man/stage1/challenge3.png')
            %canvas#owl_rectangle_man_stage1_challenge3
          .alert

  #section4.section.py-2 &nbsp;

  #challenge4.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 4
          %figure.float-xs-right.px-2
            = image_tag('lessons/owl_rectangle_man/stage1/challenge4Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Create a
            %code
              drawBuilding()
            function to draw buildings like the one from Challenge 3. The function is passed
            four values that it will assign to the following four parameters. The first two parameters,
            %code>
              x
            and
            %span
              %code>
                y
              ,
            are the coordinates of the top left corner of the building; the third parameter,
            %span
              %code>
                units
              ,
            is the number of office units per floor; and the fourth parameter,
            %span
              %code>
                floors
              ,
            is the number of floors in the building.
          %p
            Inside the
            %code
              drawBuilding()
            function, use the parameters to calculate the width and height of the building,
            set the
            %code
              context.fillStyle
            property to the color
            %span
              %code>
                '#999999'
              ,
            and use the
            %code
              context.fillRect()
            method to draw the building.
          %p
            Once the
            %code
              drawBuilding()
            function has been defined, use it to draw two buildings. The first building has 8
            office units per floor and 10 floors, and it is positioned at (60, 20). The second
            building has 6 office units per floor and 16 floors, and it is positioned at (210, 20).
          %p
            If you need help using functions, visit the
            = link_to_lesson('Functions', :functions, nil, class: 'reference-link', data: {slug: :functions})
            lesson.
          = render 'lessons/relevant', relevant: [:coordinates, :variables, :functions, :fill_rect, :fill_style]
          = render 'lessons/code_preview', stage: 1, challenge: 3, editor_id: 'owl_rectangle_man_stage1_challenge3_editor'

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_challenge4_editor'} do
          :preserve
            var canvas = document.getElementById('owl_rectangle_man_stage1_challenge4');
            var context = canvas.getContext('2d');

            function drawBuilding(x, y, units, floors) {
              var w = 0; // Use the parameter units to calculate the width of the building
              var h = 0; // Use the parameter floors to calculate the height of the building

              // SET THE COLOR OF THE BUILDING TO #999999 HERE

              // DRAW THE BUILDING HERE USING THE PARAMETERS x, y AND THE VARIABLES w, h
            }

            // DRAW ONE BUILDING WITH 8 UNITS AND 10 FLOORS AT (60, 20) HERE
            // DRAW A SECOND BUILDING WITH 6 UNITS AND 16 FLOORS AT (210, 20) HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/owl_rectangle_man/stage1/challenge4.png')
            %canvas#owl_rectangle_man_stage1_challenge4
          .alert

  #section5.section.py-2 &nbsp;

  #challenge5.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 5
          %figure.float-xs-right.px-2
            = image_tag('lessons/owl_rectangle_man/stage1/challenge5Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Update the
            %code
              drawBuilding()
            function from Challenge 4 so its parameters are now:
            %span
              %code>
                leftX
              ,
            %span
              %code>
                groundY
              ,
            %span
              %code>
                w
              ,
            and
            %span
              %code>
                h
              \.
          %p
            Inside the function, calculate the coordinates of the top left corner of
            the building's rectangle. Then, set the
            %code
              context.fillStyle
            to the color
            %code
              '#999999'
            and use the
            %code
              context.fillRect()
            method to draw the rectangle.
          %p
            Once the
            %code
              drawBuilding()
            function has been updated, use it to draw two buildings. The first building
            has 12 office units per floor and 8 floors, and it is sitting on the ground
            at (20, 280). The second building has 9 office units per floor and 15 floors,
            and it sitting on the ground at (230, 280).
          %p
            The
            %code
              drawGround()
            function is used to draw the ground at y = 280. Draw the buildings before
            the ground is drawn.
          %p
            If you need help positioning rectangles using variables, visit the
            %span
              %span><
                = link_to_lesson('Coordinates', :coordinates, nil, class: 'reference-link', data: {slug: :coordinates})
              ,
            %span
              %span><
                = link_to_lesson('Variables', :variables, nil, class: 'reference-link', data: {slug: :variables})
              ,
            and
            = link_to_lesson('fillRect()', :fill_rect, nil, class: 'reference-link', data: {slug: :fill_rect})
            lessons.
          = render 'lessons/relevant', relevant: [:coordinates, :variables, :functions, :fill_rect]
          = render 'lessons/code_preview', stage: 1, challenge: 4, editor_id: 'owl_rectangle_man_stage1_challenge4_editor'

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_challenge5_editor'} do
          :preserve
            var canvas = document.getElementById('owl_rectangle_man_stage1_challenge5');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, units, floors) {
              var w = 0; // Calculate the width of the building
              var h = 0; // Calculate the height of the building
              var x = 0; // Calculate the x-coordinate of the building's top left corner
              var y = 0; // Calculate the y-coordinate of the building's top left corner

              // SET THE COLOR OF THE BUILDING TO #999999 HERE

              // DRAW THE BUILDING HERE USING THE VARIABLES x, y, w, h
            }

            // DRAW ONE BUILDING WITH 12 UNITS AND 8 FLOORS SITTING AT (20, 280) HERE
            // DRAW A SECOND BUILDING WITH 9 UNITS AND 15 FLOORS SITTING AT (230, 280) HERE

            drawGround(280); // Draws the ground at y = 280

            function drawGround(y) {
              context.save();
              context.fillStyle = 'Black';
              context.fillRect(0, y, canvas.width, 2);
              context.restore();
            }

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/owl_rectangle_man/stage1/challenge5.png')
            %canvas#owl_rectangle_man_stage1_challenge5
          .alert

  #section6.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Use translate() to Position the Building
          %p
            Now we are going to clean up the
            %code
              drawBuilding()
            function a little bit.
          %p
            A well-written function is like a polite robot who comes over to your house
            to do a job, and then leaves everything exactly as it found it. But if you
            look at the function used to draw a French flag in the previous example, it
            wasn't so tidy. It changed the
            %code
              context.fillStyle
            property to the color
            %code
              '#EF4135'
            and never changed it back.
          %p
            To make our function more tidy, we call
            %code
              context.save()
            at the start of the function and
            %code
              context.restore()
            at the end. Calling
            %code
              context.save()
            saves the drawing state of the context (including the current
            %code
              context.fillStyle
            property) and
            %code
              context.restore()
            restores the drawing state to the last time we saved it.
          %p
            The other change is to use the
            %code
              context.translate()
            method. Notice how we had to do calculations with x and y to figure out the positions
            of the white and red rectangles in the French flag? Imagine we had to do the same for
            dozens of windows in a building. We can eliminate a lot of that math by using the
            %code
              context.translate()
            method.
          %p
            The
            %code
              context.translate()
            method moves the origin of the coordinate system. If we move the origin to the
            top left corner of the flag, then we can draw the rectangles in the flag as though
            the flag is positioned at (0, 0). The math is much easier. However, when using the
            %code
              context.translate()
            method, it is even more important to save and then restore the drawing state. If
            changing the
            %code
              context.fillStyle
            property is rude, moving the origin of the coordinate system and not moving it back is much ruder!
          %p
            Try to predict what would happen if we left out the
            %code
              context.save()
            and
            %code
              context.restore()
            method calls in the function. To learn more about saving and restoring the
            drawing state and translating the origin of the coordinate system, visit the
            = link_to_lesson('save() / restore()', :save, nil, class: 'reference-link', data: {slug: :save})
            and
            = link_to_lesson('translate()', :translate, nil, class: 'reference-link', data: {slug: :translate})
            lessons.
          = render 'lessons/relevant', relevant: [:coordinates, :functions, :fill_rect, :save, :translate]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_example5_editor'} do
              :preserve
                var canvas = document.getElementById('owl_rectangle_man_stage1_example5');
                var context = canvas.getContext('2d');

                function drawFrenchFlag(x, y) {
                  context.save(); // Save the drawing state before making any changes
                  context.translate(x, y); // Move the origin of the coordinate system to the top left corner of the flag

                  context.fillStyle = '#0055A4';
                  context.fillRect(0, 0, 20, 40); // The blue rectangle is drawn at (0, 0)

                  context.fillStyle = '#FFFFFF';
                  context.fillRect(20, 0, 20, 40); // The white rectangle is drawn at (20, 0)

                  context.fillStyle = '#EF4135';
                  context.fillRect(40, 0, 20, 40); // The red rectangle is drawn at (40, 0)

                  context.restore(); // Restore the drawing state to the way it was when we saved it
                }

                drawFrenchFlag(30, 100);
                drawFrenchFlag(150, 50);
                drawFrenchFlag(300, 180);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#owl_rectangle_man_stage1_example5


  #challenge6.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 6
          %figure.float-xs-right.px-2
            = image_tag('lessons/owl_rectangle_man/stage1/challenge6Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like

          %p
            Tidy up the drawBuilding() function from Challenge 5 in the same way by
            calling the
            %code
              context.save()
            and
            %code
              context.restore()
            methods at the start and end of the function, respectively. Then, use the
            %code
              context.translate()
            method to move the origin to (x, y) and draw the rectangle at (0, 0).
          %p
            Once the
            %code
              drawBuilding()
            function is tidy, draw one building with 10 office units per floor and 16
            floors sitting on the ground at (20, 290) and another building with 12 office
            units per floor and 10 floors sitting on the ground at (200, 290).
          %p
            The
            %code
              drawGround()
            function is used to draw the ground at y = 290. Draw the buildings before
            the ground is drawn.
          %p
            If you need help saving and restoring the drawing state and translating the origin
            of the coordinate system, visit the
            = link_to_lesson('save() / restore()', :save, nil, class: 'reference-link', data: {slug: :save})
            and
            = link_to_lesson('translate()', :translate, nil, class: 'reference-link', data: {slug: :translate})
            lessons.
          = render 'lessons/relevant', relevant: [:coordinates, :functions, :fill_rect, :save, :translate]
          = render 'lessons/code_preview', stage: 1, challenge: 5, editor_id: 'owl_rectangle_man_stage1_challenge5_editor'

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'owl_rectangle_man_stage1_challenge6_editor'} do
          :preserve
            var canvas = document.getElementById('owl_rectangle_man_stage1_challenge6');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, units, floors) {
              var w = 0; // Calculate the width of the building
              var h = 0; // Calculate the height of the building
              var x = 0; // Calculate the x-coordinate of the building's top left corner
              var y = 0; // Calculate the y-coordinate of the building's top left corner

              // SAVE THE DRAWING STATE HERE
              // MOVE THE ORIGIN TO THE TOP LEFT CORNER OF THE BUILDING HERE
              // SET THE COLOR OF THE BUILDING TO #999999 HERE
              // DRAW THE BUILDING AT (0, 0) HERE USING THE VARIABLES w, h
              // RESTORE THE LAST SAVED DRAWING STATE HERE
            }

            // DRAW ONE BUILDING WITH 10 UNITS AND 16 FLOORS SITTING AT (20, 290) HERE
            // DRAW A SECOND BUILDING WITH 12 UNITS AND 10 FLOORS SITTING AT (200, 290) HERE

            drawGround(290); // Draws the ground at y = 290

            function drawGround(y) {
              context.save();
              context.fillStyle = 'Black';
              context.fillRect(0, y, canvas.width, 2);
              context.restore();
            }

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/owl_rectangle_man/stage1/challenge6.png')
            %canvas#owl_rectangle_man_stage1_challenge6
          .alert
