#while_loops.lesson
  %h1 While Loops

  = render 'lessons/challenge_count'

  .official.row.py-3
    .col-xs-6
      %h2.py-2
        Overview
      %p
        A while loop runs a block of code over and over again as long as a certain
        condition is true. Once the condition is false, the loop ends and the program
        continues. When setting up a while loop, it is important to make sure the
        loop's condition will eventually be false; otherwise, your program will get
        stuck. Close the browser window if that happens.

    .col-xs-6
      = image_tag('lessons/while_loops/overviewVisual1.png', class: 'img-fluid')


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Example
          %p
            When we want to perform a series of actions over and over again, it's often
            a good idea to put those actions in a loop. If we know the number of times we
            want to run those actions, we can use a for loop. If we can't know the number
            ahead of time, then a while loop may be useful.
          %p
            In this example, we draw the stem of a flower and then place leaves along
            the stem. Since the length of the stem is random and the space between leaves
            is also random, there is no way to know how many leaves we will be drawing.
            So, we use a while loop to draw the leaves.
          %p
            The condition we will be testing is the y-coordinate of the next leaf. We
            will draw leaves as long as the y-coordinate of the next leaf is at least 40
            pixels from the bottom of the stem (y < h - 40). We initialize the loop by
            setting y to a random number between 40-80. Then, inside of the loop, after
            drawing a leaf, we calculate the y-coordinate of the next leaf by adding a
            random number between 15-50 to y.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'while_loops_example1_editor'} do
              :preserve
                var canvas = document.getElementById('while_loops_example1');
                var context = canvas.getContext('2d');

                context.save();
                context.translate(260, 50);

                var h = 200 + 50 * Math.random(); // Set the height of the stem to a random number (200 - 250)

                context.fillStyle = '#228B22';
                context.fillRect(-6, 0, 12, h); // Draw the stem

                var n = 0; // Set a counter for the number of leaves
                var y = 40 + 40 * Math.random(); // Set the y-coordinate of the first leaf to a random number (40 - 80)

                while (y < h - 40) { // Keep drawing leaves while the y-coordinate of the next leaf is < the height of the stem - 40
                  n = n + 1; // Update the counter
                  context.save();
                  if (n % 2 == 1) context.scale(-1, 1); // If the counter is odd, reflect the leaf onto the other side of the stem
                  context.beginPath();
                  context.arc(34.28, y + 28.28, 40, -3 * Math.PI / 4, -1 * Math.PI / 4, false);
                  context.arc(34.28, y - 28.28, 40, 1 * Math.PI / 4, 3 * Math.PI / 4, false);
                  context.closePath();
                  context.fill(); // Draw the leaf
                  context.restore();

                  y = y + (15 + 35 * Math.random()); // Calculate the y-coordinate of the next leaf by adding a random number (15 - 50)
                }

                context.save();
                context.fillStyle = '#FFA500';
                for (var i = 0; i < 6; i = i + 1) {
                  context.beginPath();
                  context.arc(0, 40, 24, 0, 2 * Math.PI, false);
                  context.closePath();
                  context.fill(); // Draw a flower petal
                  context.rotate(Math.PI / 3);
                }

                context.restore();

                context.fillStyle = '#FFFF00';
                context.beginPath();
                context.arc(0, 0, 24, 0, 2 * Math.PI, false);
                context.closePath();
                context.fill(); // Draw the flower center

                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#while_loops_example1


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Example
          %p
            In this example, we use a while loop to draw the trajectory of a cannonball.
            Because the number of cannonballs drawn will vary with the angle of the cannon,
            we use a while loop.
          %p
            Change the angle of the cannon to see the trajectory of the cannonball change.
          %p
            The condition of the while loop is to keep drawing cannonballs while the
            center of the cannonball is at least 5 pixels above the ground. We use 5 pixels
            because the radius of the cannonball is 5 pixels. Inside of the while loop,
            we calculate the coordinates of the next cannonball and adjust the velocity of the
            cannonball according to gravity.
          %p
            By using a while loop, we don't have to do any calculus or solve any quadratic
            equations in order to plot the trajectory of the cannonball ahead of time.
            We just keep drawing cannonballs as long as the position of the cannonball is still
            above the ground.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'while_loops_example2_editor'} do
              :preserve
                var canvas = document.getElementById('while_loops_example2');
                var context = canvas.getContext('2d');

                var angle = 30; // The angle of the cannon (10 - 80);

                angle = -Math.PI * Math.min(80, Math.max(10, angle)) / 180;
                var g = 1;
                var dX = 20 * Math.cos(angle);
                var dY = 20 * Math.sin(angle);

                context.save();
                context.fillStyle = '#333333';
                context.fillRect(0, 300, canvas.width, 2); // Draw the ground
                context.translate(10, 285);

                context.save();
                context.rotate(angle);
                context.fillStyle = '#999999';
                context.fillRect(-10, -5, 30, 10); // Draw the cannon's barrel
                context.restore();
                context.translate(0, 15);
                context.fillStyle = '#666666';
                context.beginPath();
                context.arc(0, -10, 10, 0, 2 * Math.PI, false);
                context.closePath();
                context.fill(); // Draw the cannon's tire

                var x = 2 * dX;
                var y = 2 * dY - 15; // Set the coordinates of the first cannonball

                while (y < -5) { // Keep drawing the cannonball while it is above the ground
                  context.beginPath();
                  context.arc(x, y, 5, 0, 2 * Math.PI, false);
                  context.closePath();
                  context.fill(); // Draw the cannonball

                  x = x + dX;
                  y = y + dY; // Calculate the coordinates of the next cannonball
                  dY = dY + g; // Calculate the effect of gravity
                }

                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#while_loops_example2


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Example
          %p
            In this example, we are dividing a rectangle into squares. The number of
            squares drawn depends on the size of the rectangle.
          %p
            Change the width and height of the rectangle to see how many squares it contains.
          %p
            The condition of the while loop is to keep drawing squares while the width
            and the height of the remaining rectangle are both greater than zero.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'while_loops_example3_editor'} do
              :preserve
                var canvas = document.getElementById('while_loops_example3');
                var context = canvas.getContext('2d');

                var n = 0;
                var w = 20; // The width of the rectangle (1-25)
                var h = 16; // The height of the rectangle (1-25)
                var color = ['#FF0000', 'FFA500', 'FFFF00', '#00FF00', '#0000FF', '#4B0082', '#EE82EE'];

                w = 10 * Math.min(25, Math.max(w, 1));
                h = 10 * Math.min(25, Math.max(h, 1));

                context.save();
                context.translate(10, 10);

                while (w > 0 && h > 0) {
                  var nextW, nextH;
                  context.fillStyle = color[n % color.length]; // Set the color of the rectangle
                  context.fillRect(0, 0, w, h);

                  n = n + 1;

                  if (w > h) {
                    w = w - h;
                    if (Math.random() > 0.5) context.translate(h, 0);
                  } else {
                    h = h - w;
                    if (Math.random() > 0.5) context.translate(0, w);
                  }
                }

                context.restore();

                var s = 's';
                var are = 'are ';

                if (n == 1) {
                  s = '';
                  are = 'is ';
                }

                context.fillStyle = '#000000';
                context.font = '16px sans-serif';
                context.fillText('There ' + are + n + ' rectangle' + s, 10, 290);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#while_loops_example3
