#translate.lesson
  %h1 While Loops

  = render 'lessons/challenge_count'

  .official.row.py-3
    .col-xs-6
      %h2.py-2
        Overview
      %p
        A while loop runs a block of code over and over again as long as a certain
        condition is true. Once the condition is false, the loop ends and the program
        continues. When setting up a while loop, it is important to make sure the
        loop's condition will eventually be false; otherwise, your program will get
        stuck. Close the browser window if that happens.

    .col-xs-6
      = image_tag('lessons/scale/overviewVisual1.png', class: 'img-fluid')


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Example
          %p
            When we want to perform a series of actions over and over again, it's often
            a good idea to put those actions in a loop. If we know the number of times we
            want to run those actions, we can use a for loop. If we can't know the number
            ahead of time, then a while loop may be useful.
          %p
            In this example, we draw the stem of a flower and then place leaves along
            the stem. Since the length of the stem is random and the space between leaves
            is also random, there is no way to know how many leaves we will be drawing.
            So, we use a while loop to draw the leaves.
          %p
            The condition we will be testing is the y-coordinate of the next leaf. We
            will draw leaves as long as the y-coordinate of the next leaf is at least 40
            pixels from the bottom of the stem (y < h - 40). We initialize the loop by
            setting y to a random number between 40-80. Then, inside of the loop, after
            drawing a leaf, we calculate the y-coordinate of the next leaf by adding a
            random number between 15-50 to y.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'while_loops_example1_editor'} do
              :preserve
                var canvas = document.getElementById('while_loops_example1');
                var context = canvas.getContext("2d");
                context.clearRect(0, 0, canvas.width, canvas.height);

                context.save();
                context.translate(260, 50);
                
                var h = 200 + 50 * Math.random(); // Set the height of the stem to a random number (200 - 250)
                
                context.fillStyle = '#228B22';
                context.fillRect(-6, 0, 12, h); // Draw the stem
                
                var n = 0; // Set a counter for the number of leaves
                var y = 40 + 40 * Math.random(); // Set the y-coordinate of the first leaf to a random number (40 - 80)
                
                while (y < h - 40) { // Keep drawing leaves while the y-coordinate of the next leaf is < the height of the stem - 40
                  n = n + 1; // Update the counter
                  context.save();
                  if (n % 2 == 1) context.scale(-1, 1); // If the counter is odd, reflect the leaf onto the other side of the stem
                  context.beginPath();
                  context.arc(34.28, y + 28.28, 40, -3 * Math.PI / 4, -1 * Math.PI / 4, false);
                  context.arc(34.28, y - 28.28, 40, 1 * Math.PI / 4, 3 * Math.PI / 4, false);
                  context.closePath();
                  context.fill(); // Draw the leaf
                  context.restore();
                  
                  y = y + (15 + 35 * Math.random()); // Calculate the y-coordinate of the next leaf by adding a random number (15 - 50)
                }
                
                context.save();
                context.fillStyle = '#FFA500';
                for (var i = 0; i < 6; i = i + 1) {
                  context.beginPath();
                  context.arc(0, 40, 24, 0, 2 * Math.PI, false);
                  context.closePath();
                  context.fill(); // Draw a flower petal
                  context.rotate(Math.PI / 3);
                }
                
                context.restore();
                
                context.fillStyle = '#FFFF00';
                context.beginPath();
                context.arc(0, 0, 24, 0, 2 * Math.PI, false);
                context.closePath();
                context.fill(); // Draw the flower center
                
                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#while_loops_example1


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Example
          %p
            The scale() method doesn't just shrink or enlarge a shape. It changes the
            size of the coordinate system, which also moves a shape. The only point in
            the context that does not move when the context is scaled is the origin (0, 0).
          %p
            In this example, the red circle is positioned at the origin of the context,
            (0, 0). The purple rectangle is positioned at (20, 40), 20 pixels to the right
            and 40 pixels down from the origin.
          %p
            Change the scale of the context by entering new values into context.scale().
            What happens? The size of both the red circle and purple rectangle change, but
            the red circle stays in the same place while the purple rectangle moves. This
            is because the red circle is centered on the origin.
          %p
            Move the purple rectangle to a new position relative to the red circle by
            changing its x- and y-coordinates (the first two values in context.fillRect()).
            Then change the scale of the context again and watch what happens. If we increase
            the scale, the rectangle moves farther from the origin. If we decrease the scale,
            it moves closer.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'while_loops_example2_editor'} do
              :preserve
                var canvas = document.getElementById('while_loops_example2');
                var context = canvas.getContext("2d");
                context.clearRect(0, 0, canvas.width, canvas.height);
                
                var angle = 45; // The angle of the cannon (10 - 80);
                
                angle = -Math.PI * Math.min(80, Math.max(10, angle)) / 180;
                var g = 1;
                var dX = 20 * Math.cos(angle);
                var dY = 20 * Math.sin(angle);
                
                context.save();
                context.fillStyle = '#333333';
                context.fillRect(0, 300, canvas.width, 2); // Draw the ground
                context.translate(10, 285);
                
                context.save();
                context.rotate(angle);
                context.fillStyle = '#999999';
                context.fillRect(-10, -5, 30, 10); // Draw the cannon's barrel
                context.restore();
                context.translate(0, 15);
                context.fillStyle = '#666666';
                context.beginPath();
                context.arc(0, -10, 10, 0, 2 * Math.PI, false);
                context.closePath();
                context.fill(); // Draw the cannon's tire
                
                var x = 2 * dX;
                var y = 2 * dY - 15; // Set the coordinates of the first cannonball
                
                while (y < -5) { // Keep drawing the cannonball while it is above the ground
                  context.beginPath();
                  context.arc(x, y, 5, 0, 2 * Math.PI, false);
                  context.closePath();
                  context.fill(); // Draw the cannonball
                  
                  x = x + dX;
                  y = y + dY; // Calculate the coordinates of the next cannonball
                  dY = dY + g; // Calculate the effect of gravity
                }

                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#while_loops_example2


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Example
          %p
            We don't have to scale the coordinate system of the context the same amount
            along both the x-axis and the y-axis.
          %p
            In this example, we use context.scale() to stretch three circles along the
            y-axis, turning them into ovals and creating a flame effect. The red, orange,
            and yellow circles are all drawn with the same radius.
          %p
            The origin of the context is at the bottom of all three circles, which makes
            it easy to line them up.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'scale_example2_editor'} do
              :preserve
                var canvas = document.getElementById('scale_example2');
                var context = canvas.getContext("2d");
                context.clearRect(0, 0, canvas.width, canvas.height);
                
                context.save();
                context.translate(260, 280);
                
                context.save();
                context.scale(1, 3); // SET THE SCALE FOR THE YELLOW CIRCLE
                context.fillStyle = '#FFFF00';
                context.beginPath();
                context.arc(0, -40, 40, 0, 2 * Math.PI, false);
                context.closePath();
                context.fill();
                context.restore();
                
                context.save();
                context.scale(0.8, 2); // SET THE SCALE FOR THE ORANGE CIRCLE
                context.fillStyle = '#FFA500';
                context.beginPath();
                context.arc(0, -40, 40, 0, 2 * Math.PI, false);
                context.closePath();
                context.fill();
                context.restore();
                
                context.save();
                context.scale(0.6, 1.2); // SET THE SCALE FOR THE RED CIRCLE
                context.fillStyle = '#FF0000';
                context.beginPath();
                context.arc(0, -40, 40, 0, 2 * Math.PI, false);
                context.closePath();
                context.fill();
                context.restore();

                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#scale_example2


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Example
          %p
            If we scale the coordinate system of the context by -1 along either the
            x-axis or the y-axis, we can flip a drawing and create a mirror image.
          %p
            In this example, we draw the text 'Rightside Up' at (0, -80), 80 pixels above
            the origin of the context at the red circle. Then we draw the text 'Upside Down',
            also at (0, -80). But before drawing the text 'Upside Down', we scale the context
            using context.scale(1, -1).

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'scale_example3_editor'} do
              :preserve
                var canvas = document.getElementById('scale_example3');
                var context = canvas.getContext("2d");
                context.clearRect(0, 0, canvas.width, canvas.height);
                context.font = '48px sans-serif';
                context.textAlign = 'center';
                
                context.save();
                context.translate(260, 160);
                
                context.save();
                context.scale(1, 1);
                context.fillStyle = '#009900';
                context.fillText('Rightside Up', 0, -80);
                context.restore();
                
                context.save();
                context.scale(1, -1);
                context.fillStyle = '#009900';
                context.fillText('Upside Down', 0, -80);
                context.restore();
                
                context.save();
                context.fillStyle = '#FF0000';
                context.beginPath();
                context.arc(0, 0, 5, 0, 2 * Math.PI, false);
                context.closePath();
                context.fill();
                context.restore();

                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#scale_example3
