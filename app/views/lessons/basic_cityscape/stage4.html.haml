#basic_cityscape_stage4.page
  %h1
    Stage 4
  .description.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Overview
          %figure.float-xs-right.px-2
            = image_tag('lessons/basic_cityscape/stage4/overviewVisual1.png', class: 'img-fluid')
          %p
            In the fourth stage of the Cityscape Challenge, we create three rows of
            buildings. The buildings in the foreground are larger and lighter in color.
            The buildings in the background are smaller and darker in color. This will
            create the illusion of 3D depth.

  #section1.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw a Row of Buildings
          %p
            When we wanted to draw a row of windows in Stage 2 Challenge 2, we used a for
            loop. A for loop is great when we want to draw something over and over again a
            specific number of times.
          %p
            The difference between drawing a row of windows and drawing a row of buildings
            is: we know exactly how many windows to draw, but we don't know how many buildings
            to draw because every building has a different width.
          %p
            So, to draw a row of buildings, we are going to use a while loop instead of a for loop.
          %p
            In this example, we draw a white rectangle that is 400 pixels wide, and then use a
            while loop to draw pink squares along the bottom of the white rectangle until the last
            square reaches the end of the rectangle.
          %pre
            %code
              :preserve
                var x = 0;

                while (x < 400) {
                  var s = randomInteger(10, 50);
                  context.save();
                  context.translate(x, 0);
                  drawSquare(s);
                  context.restore();

                  x = x + s;
                }
          %p
            Before the while loop, we assign the variable
            %span
              %code>
                x = 0
              \.
            We are using the variable
            %code
              x
            to store the x-coordinate of the next building, and we will keep running through
            the while loop as long as the condition
            %code
              x < 400
            is true. Once the x-coordinate of the next building is greater than or equal
            to 400, the while loop ends.
          %p
            Inside the while loop, we generate a random integer between 10 and 50 to use as the
            side length of the next square. We translate to the x-coordinate stored in the variable
            %span
              %code>
                x
              ,
            draw the square, and then restore the coordinate system. Finally, we add the
            square's side length to
            %code
              x
            to get the x-coordinate of the next square.
          %p
            Press "Run" a few times and count the number of squares drawn. The number of squares
            will change depending on the size of the squares. To learn more about while loops, visit the
            = link_to_lesson('While Loops', :while_loops, nil, class: 'reference-link', data: {slug: :while_loops})
            lesson.
          = render 'lessons/relevant', relevant: [:coordinates, :variables, :while_loops, :fill_rect, :random, :round]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_example1_editor'} do
              :preserve
                var canvas = document.getElementById('basic_cityscape_stage4_example1');
                var context = canvas.getContext('2d');

                context.save();
                context.fillStyle = '#FFFFFF';
                context.fillRect(0, 0, 400, 100);
                context.strokeStyle = '#FF1493';
                context.translate(0, 100);

                var x = 0;

                while (x < 400) {
                  var s = randomInteger(10, 50);
                  context.save();
                  context.translate(x, 0);
                  drawSquare(s);
                  context.restore();

                  x = x + s;
                }

                context.restore();

                function drawSquare(s) {
                  context.save();
                  context.translate(0, -s);
                  context.strokeRect(0, 0, s, s);
                  context.restore();
                }

                function randomInteger(min, max) {
                  var i = min + Math.floor((max - min + 1) * Math.random());

                  return i;
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#basic_cityscape_stage4_example1


  #challenge1.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 1
          %p
            Create a
            %code
              drawBuildingRow()
            function to draw a row of random buildings. Because we are drawing a row of
            buildings, we will set the
            %code
              groundY
            for the entire row and then position each building at (x, 0).
          %pre
            %code
              :preserve
                function drawBuildingRow(rowX, groundY) {
                  context.save();
                  context.translate(rowX, groundY);

                  // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE

                  context.restore();
                }
          %p
            Inside the
            %code
              drawBuildingRow()
            function, set up a while loop to draw the row of buildings. Draw the first building
            at (0, 0) and keep drawing buildings as long as the x-coordinate of the next building
            is less than 800.
          %p
            Inside the while loop, generate random integers for the number of office units per
            floor, the number of floors, the type of windows, and the type of roof for the building.
            Draw the building, and then calculate the x-coordinate of the next building  so there is
            a 12-pixel space between buildings.
          %p
            In the example above with the random squares, we use
            %code
              x = x + s
            to update the value of
            %code
              x
            for the next loop. This works because both
            %code
              x
            and
            %code
              s
            are defined within the "scope" of the while loop. However, in the
            %code
              drawBuildingRow()
            function, we need the width of the building stored in the variable
            %code
              w
            to calculate the x-coordinate of the next building, but we can't access
            %code
              w
            inside the while loop because it is only defined locally inside the
            %code
              drawBuilding()
            function.
          %p
            To fix this, move the width and height calculations out of the
            %code
              drawBuilding()
            function and put them into the while loop after generating random integers for
            the number of units per floor and the number of floors. Then, pass those values
            into the
            %code
              drawBuilding()
            function as parameters.
          %p
            The definition for the
            %code
              drawBuilding()
            function should now look like this:
            %pre
              %code
                :preserve
                  function drawBuilding(leftX, groundY, w, h, units, floors, windowType, roofType) {

                    // YOUR CODE FOR DRAWING A BUILDING HERE

                  }
          %p
            And because the width of the building is now stored in the variable
            %code
              w
            defined inside the while loop, we can use it to calculate the x-coordinate of the next building.
            %span.highlight
              Make sure to update the x-coordinate for the next building at the end of
              the while loop or the loop will never end.
      .row.py-1
        .col-xs-12
          = image_tag('lessons/basic_cityscape/stage4/challenge1Visual1.png', style: 'background-color: #EEEEEE;')
      .row
        .col-xs-12
          %p
            When your
            %code
              drawBuildingRow()
            function is ready, draw a row of buildings starting at (0, 320).
            Press "Run" multiple times to make sure it is working.
            The row of buildings should cover the length of the red line on the canvas and
            look similar to the image above. Obviously, the buildings will be random. If your
            %code
              drawBuildingRow()
            function seems to be working, mark the challenge as complete by selecting "Yes, it looks good".
          %p
            %span.highlight
              If you press "Run" and your program seems stuck, you may have forgotten
              to update the x-coordinate for the next building at the
              end of the while loop. To end the while loop, you will need to close this entire
              page in your browser and then re-open it again.
          %p
            To learn more about variable scope, visit the
            = link_to_lesson('Variables', :variables, nil, class: 'reference-link', data: {slug: :variables})
            lesson.
          = render 'lessons/relevant', relevant: [:coordinates, :variables, :functions, :while_loops, :random]
          = render 'lessons/code_preview', stage: 3, challenge: 4, editor_id: 'basic_cityscape_stage3_challenge4_editor'

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_challenge1_editor', cols: 12} do
          :preserve
            var canvas = document.getElementById('basic_cityscape_stage4_challenge1');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, w, h, units, floors, windowType, roofType) {

              // YOUR CODE FOR DRAWING A BUILDING HERE

            }

            function drawWindow(windowType) {

              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF WINDOWS HERE

            }

            function drawRoof(w, roofType) {

              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF ROOFS HERE

            }

            function randomInteger(min, max) {

              // YOUR CODE FOR GENERATING A RANDOM INTEGER BETWEEN MIN AND MAX, INCLUDING MIN AND MAX, HERE

            }

            function drawBuildingRow(rowX, groundY) {
              context.save();
              context.translate(rowX, groundY);

              // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE

              context.restore();
            }

            // DRAW A ROW OF RANDOM BUILDINGS SITTING ON THE GROUND STARTING AT (0, 320) HERE

      .row.py-1
        .visual.col-xs-12
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/basic_cityscape/stage4/challenge1.png')
            %canvas#basic_cityscape_stage4_challenge1
          .alert

  #section2.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw a Smaller Row of Random Buildings
          %p
            To create a 3D effect, we are going to draw two more rows of buildings behind
            the first row. Because objects get smaller in the distance, we will draw the other
            rows of buildings slightly smaller using the
            %code
              context.scale()
            method.
          %p
            In this example, we use the
            %code
              context.scale()
            method to change the size of four random flags.
          %p
            By using
            %span
              %code>
                context.scale(0.6, 0.6)
              ,
            we draw everything at 60% scale. If we use
            %span
              %code>
                context.scale(1, 1)
              ,
            then we draw everything at normal size.
          %p
            Try
            %code
              context.scale(1.5, 1.5)
            to see what happens. The first value changes the scale in the x-direction.
            The second value changes it in the y-direction. The two values do not have to be the same.
          %p
            Note: The scale of the context gets saved and restored with the
            %code
              context.save()
            and
            %code
              context.restore()
            methods.
          %p
            To learn more about scaling the coordinate system, visit the
            = link_to_lesson('scale()', :scale, nil, class: 'reference-link', data: {slug: :scale})
            lesson.
          = render 'lessons/relevant', relevant: [:coordinates, :variables, :for_loops, :switch_statements, :save, :translate, :random, :scale]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_example2_editor'} do
              :preserve
                var canvas = document.getElementById('basic_cityscape_stage4_example2');
                var context = canvas.getContext('2d');

                context.save();
                context.translate(20, 20);
                context.scale(0.6, 0.6); // Changes the scale of the coordinate system

                for (var i = 0; i < 4; i = i + 1) {
                  var flagType = randomInteger(0, 2);
                  drawFlag(flagType);
                  context.translate(100, 30);
                }

                context.restore();

                function drawFlag(country) {
                  context.save();

                  switch (country) {
                    case 0:
                      context.fillStyle = '#0055A4';
                      context.fillRect(0, 0, 30, 60);

                      context.fillStyle = '#FFFFFF';
                      context.fillRect(30, 0, 30, 60);

                      context.fillStyle = '#EF4135';
                      context.fillRect(60, 0, 30, 60);
                      break;

                    case 1:
                      context.fillStyle = '#FCD116';
                      context.fillRect(0, 0, 90, 30);

                      context.fillStyle = '#003893';
                      context.fillRect(0, 30, 90, 15);

                      context.fillStyle = '#CE1126';
                      context.fillRect(0, 45, 90, 15);
                      break;

                    case 2:
                      context.fillStyle = '#ED1C24';
                      context.fillRect(0, 0, 90, 60);

                      context.fillStyle = '#FFFFFF';
                      context.fillRect(0, 10, 90, 40);

                      context.fillStyle = '#241D4F';
                      context.fillRect(0, 20, 90, 20);
                      break;
                  }

                  context.restore();
                }

                function randomInteger(min, max) {
                  var i = min + Math.floor((max - min + 1) * Math.random());

                  return i;
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#basic_cityscape_stage4_example2


  #challenge2.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 2
          %p
            Update the
            %code
              drawBuildingRow()
            function so we can draw rows with different scales.
          %p
            In the definition of the drawBuildingRow() function, add a new parameter named
            %span
              %code>
                scale
              \:
          %pre
            %code
              :preserve
                function drawBuildingRow(rowX, groundY, scale) {
                  context.save();
                  context.translate(rowX, groundY);

                  // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE

                  context.restore();
                }
          %p
            Then, inside the
            %code
              drawBuildingRow()
            function,
            after saving the drawing state and translating the coordinate system to
            the start of the row, change the scale of the coordinate system in both the x-
            and y-directions to the value stored in the
            %code
              scale
            parameter using the
            %code
              context.scale()
            method. We want to scale the coordinate system after translating it because the coordinates
            %span
              (
              %code><
                rowX
              ,
            %span
              %code>
                groundY
              )
            are at normal scale.
          %p
            If you try to draw a row of buildings at 0.6 (or 60%) scale now, you will see something
            interesting. The buildings are smaller, but the row of buildings is not 800 pixels
            long on the canvas. While the row of buildings is 800 pixels long in the coordinate system,
            it's only 480 pixels long on the canvas because 60% of 800 is 480.
          %p
            To draw a row of buildings at 0.6 scale that is at least 800 pixels long on the canvas,
            we need to adjust the condition inside our while loop. Instead of using
            %span
              %code>
                x < 800
              ,
            we should keep drawing buildings as long as
            %span
              %code>
                x < 800 / scale
              \.
            At 0.6 scale, that means drawing buildings as long as
            %span
              %code>
                x < 1333
              \.
      .row.py-1
        .col-xs-12
          = image_tag('lessons/basic_cityscape/stage4/challenge2Visual1.png', style: 'background-color: #EEEEEE;')
      .row
        .col-xs-12
          %p
            Draw a row of buildings at 0.6 scale where the first building is sitting on the
            ground at (0, 280) and the row is at least 800 pixels long on the canvas.
            The row of buildings should cover the length of the red line on the canvas and look
            similar to the image above. Obviously, the buildings will be random. If your
            %code
              drawBuildingRow()
            function seems to be working, mark the challenge as complete by selecting "Yes, it looks good".
          %p
            %span.highlight
              If you press "Run" and your program seems stuck, you may have forgotten
              to update the x-coordinate for the next building at the
              end of the while loop. To end the while loop, you will need to close this entire
              page in your browser and then re-open it again.
          = render 'lessons/relevant', relevant: [:coordinates, :variables, :functions, :while_loops, :save, :translate, :scale]
          = render 'lessons/code_preview', stage: 4, challenge: 1, editor_id: 'basic_cityscape_stage4_challenge1_editor'

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_challenge2_editor', cols: 12} do
          :preserve
            var canvas = document.getElementById('basic_cityscape_stage4_challenge2');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, w, h, units, floors, windowType, roofType) {

              // YOUR CODE FOR DRAWING A BUILDING HERE

            }

            function drawWindow(windowType) {

              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF WINDOWS HERE

            }

            function drawRoof(w, roofType) {

              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF ROOFS HERE

            }

            function randomInteger(min, max) {

              // YOUR CODE FOR GENERATING A RANDOM INTEGER BETWEEN MIN AND MAX, INCLUDING MIN AND MAX, HERE

            }

            function drawBuildingRow(rowX, groundY) {

              // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE

            }

            // DRAW A ROW OF RANDOM BUILDINGS AT 0.6 SCALE SITTING ON THE GROUND STARTING AT (0, 280) HERE

      .row.py-1
        .visual.col-xs-12
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/basic_cityscape/stage4/challenge2.png')
            %canvas#basic_cityscape_stage4_challenge2
          .alert

  #section3.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw a Smaller and Darker Row of Random Buildings
          %p
            In addition to making the rows in the back smaller, we will also make them darker.
          %p
            There are several ways to define colors when using the
            %code
              context.fillStyle
            property. So far, we have used the color
            %code
              '#999999'
            to draw our buildings. Another way to describe the color
            %code
              '#999999'
            is
            %span
              %code>
                'rgb(153, 153, 153)'
              \.
            The number 153 in base 10 is actually 99 in base 16.
          %p
            When using RGB values to define a color, we are describing the amount of red (r), green (g),
            and blue (b) in the color, where 0 is none and the maximum value is 255. For example, the color
            %code
              black
            is
            %span
              %code>
                'rgb(0, 0, 0)'
              ,
            which is no red, no green, and no blue; and the color
            %code
              white
            is
            %span
              %code>
                'rgb(255, 255, 255)'
              ,
            which is maximum red, maximum green, and maximum blue.
          %p
            In this example, we draw a rectangle with a random color by selecting and combining
            random amounts of red, green, and blue.
          %p
            There are a few things to keep in mind when using RGB values to define a color. First, the red,
            green, and blue values have to be integers between 0 and 255. No decimals. Second, the
            %code
              'rgb()'
            format is a string of text. It may look like a function call, but it isn't. To build a string of
            text from the three random integers stored in variables
            %span
              %code>
                r
              ,
            %span
              %code>
                g
              ,
            and
            %span
              %code>
                b
              ,
            we use the
            %code
              +
            operator to combine bits of text:
          %pre
            %code
              :preserve
                var color = 'rgb(' + r + ', ' + g + ', ' + b + ')'; // Combine the red, green, and blue in a text string
          %p
            Press "Run" to change the color of the rectangle.
          %p
            To learn more about describing fill colors and loose-typing of variables, visit the
            = link_to_lesson('fillStyle', :fill_style, nil, class: 'reference-link', data: {slug: :fill_style})
            and
            = link_to_lesson('Variables', :variables, nil, class: 'reference-link', data: {slug: :variables})
            lessons.
          = render 'lessons/relevant', relevant: [:variables, :fill_rect, :fill_style, :random, :round]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_example3_editor'} do
              :preserve
                var canvas = document.getElementById('basic_cityscape_stage4_example3');
                var context = canvas.getContext('2d');

                var r = randomInteger(0, 255) // Choose a random amount of red
                var g = randomInteger(0, 255) // Choose a random amount of green
                var b = randomInteger(0, 255) // Choose a random amount of blue
                var color = 'rgb(' + r + ', ' + g + ', ' + b + ')'; // Combine the red, green, and blue in a text string

                context.save();
                context.fillStyle = color; // Use the color as the context's fillStyle
                context.fillRect(40, 40, 360, 240);

                drawText(color, 220, 300); // Print the text string stored in the variable color

                context.restore();

                function drawText(text, x, y) {
                  context.save();
                  context.fillStyle = 'rgb(0, 0, 0)';
                  context.font = '16px sans-serif';
                  context.textAlign = 'center';
                  context.fillText(text, x, y);
                  context.restore();
                }

                function randomInteger(min, max) {
                  var i = min + Math.floor((max - min + 1) * Math.random());

                  return i;
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#basic_cityscape_stage4_example3


  #challenge3.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 3
          %p
            Update the
            %code
              drawBuildingRow()
            and
            %code
              drawBuilding()
            functions to draw darker buildings as the scale gets smaller.
          %p
            Inside the
            %code
              drawBuildingRow()
            function, use the expression
            %code
              Math.round(153 * scale)
            to calculate the amount of red, green, and blue in the building's color.
            (For the building's color, the amount of red, green, and blue are all the same.)
            This will make the color darker as the scale gets smaller.
          %p
            Create a text string from the red, green, and blue values. Store the text string
            in a variable named
            %span
              %code>
                buildingColor
              \.
            Store the text string
            %code
              'rgb(102, 102, 102)'
            in another variable named
            %span
              %code>
                windowColor
              \.
            The window color for all three rows is the same.
          %p
            Pass the variables
            %code
              buildingColor
            and
            %code
              windowColor
            into the
            %code
              drawBuilding()
            function. Make sure the
            %code
              drawBuilding()
            function definition is updated to include
            %code
              buildingColor
            and
            %code
              windowColor
            as parameters.
          %p
            Inside the
            %code
              drawBuilding()
            function, set the
            %code
              context.fillStyle
            property to
            %code
              buildingColor
            \when drawing the building and roof and to
            %code
              windowColor
            \when drawing the windows.
      .row.py-1
        .col-xs-12
          = image_tag('lessons/basic_cityscape/stage4/challenge3Visual1.png', style: 'background-color: #EEEEEE;')
      .row
        .col-xs-12
          %p
            Draw a row of buildings at 0.6 scale where the first building is sitting on
            the ground at (0, 280). The buildings should be both smaller and darker than the
            buildings in Challenge 1, and the row should cover the length of the red line on
            the canvas and look similar to the image above. Obviously, the buildings will be
            random. If your
            %code
              drawBuildingRow()
            function seems to be working, mark the challenge as complete by selecting "Yes, it looks good".
          %p
            %span.highlight
              If you press "Run" and your program seems stuck, you may have forgotten
              to update the x-coordinate for the next building at the
              end of the while loop. To end the while loop, you will need to close this entire
              page in your browser and then re-open it again.
          = render 'lessons/relevant', relevant: [:variables, :functions, :while_loops, :fill_style, :save, :translate, :scale]
          = render 'lessons/code_preview', stage: 4, challenge: 2, editor_id: 'basic_cityscape_stage4_challenge2_editor'

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_challenge3_editor', cols: 12} do
          :preserve
            var canvas = document.getElementById('basic_cityscape_stage4_challenge3');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, w, h, units, floors, windowType, roofType) {

              // YOUR CODE FOR DRAWING A BUILDING HERE

            }

            function drawWindow(windowType) {

              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF WINDOWS HERE

            }

            function drawRoof(w, roofType) {

              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF ROOFS HERE

            }

            function randomInteger(min, max) {

              // YOUR CODE FOR GENERATING A RANDOM INTEGER BETWEEN MIN AND MAX, INCLUDING MIN AND MAX, HERE

            }

            function drawBuildingRow(rowX, groundY, scale) {

              // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE

            }

            // DRAW A ROW OF RANDOM BUILDINGS AT 0.6 SCALE SITTING ON THE GROUND STARTING AT (0, 280) HERE

      .row.py-1
        .visual.col-xs-12
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/basic_cityscape/stage4/challenge3.png')
            %canvas#basic_cityscape_stage4_challenge3
          .alert

  #section4.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw Three Rows of Buildings and a Horizon
          %p
            We are almost done. The last step is to assemble your final drawing.
          %p
            In this example, we draw a cake for celebrating! Press "Run" to find your favorite cake.
          = render 'lessons/relevant', relevant: [:functions, :for_loops, :switch_statements, :fill_rect, :fill_style, :random]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_example4_editor'} do
              :preserve
                var canvas = document.getElementById('basic_cityscape_stage4_example4');
                var context = canvas.getContext('2d');

                function randomInteger(min, max) {
                  var i = min + Math.floor((max - min + 1) * Math.random());

                  return i;
                }

                function color(i) {
                  switch (i) {
                    case 0:
                      c = '#90EE90';
                      break;

                    case 1:
                      c = '#E6E6FA';
                      break;

                    case 2:
                      c = '#FFFACD';
                      break;

                    case 3:
                      c = '#FFB6C1';
                      //c = '#FFE4E1';
                      break;

                    case 4:
                      c = '#B0E0E6';
                      break;

                    case 5:
                      c = '#1E90FF';
                      break;

                    case 6:
                      c = '#9932CC';
                      break;

                    case 7:
                      c = '#BA55D3';
                      break;

                    case 8:
                      c = '#FF1493';
                      break;

                    case 9:
                      c = '#3CB371';
                      break;
                  }

                  return c;
                }

                function drawCandle() {
                  context.save();
                  context.translate(0, -80);
                  context.fillStyle = '#FFFFFF';
                  context.fillRect(-5, 30, 10, 50);
                  context.fillStyle = '#FFFF00';
                  context.fillRect(-6, 0, 12, 30);
                  context.fillStyle = '#FF8C00';
                  context.fillRect(-5, 10, 10, 20);
                  context.fillStyle = '#FF0000';
                  context.fillRect(-4, 20, 8, 10);
                  context.restore();
                }

                function drawDecoration(icingColor, accentColor) {
                  context.save();
                  context.rotate(0.25 * Math.PI);
                  context.fillStyle = accentColor;
                  context.fillRect(-8, -8, 16, 16);
                  context.rotate(0.25 * Math.PI);
                  context.fillStyle = icingColor;
                  context.fillRect(-8, -8, 16, 16);
                  context.rotate(0.25 * Math.PI);
                  context.fillStyle = accentColor;
                  context.fillRect(-3, -3, 6, 6);
                  context.restore();
                }

                function drawTier(cakeColor, icingColor) {
                  context.save();
                  context.fillStyle = cakeColor;
                  context.translate(-100, 0);
                  context.fillRect(0, 0, 200, 50);

                  context.translate(1, 45);
                  context.fillStyle = icingColor;
                  for (var i = 0; i < 19; i = i + 1) {
                    context.save();
                    context.rotate(0.25 * Math.PI);
                    context.fillRect(0, 0, 10, 10);
                    context.restore();
                    context.translate(11, 0);
                  }
                  context.restore();
                }

                function drawCake() {
                  var cakeColor = color(randomInteger(0, 4));
                  var icingColor = color(randomInteger(5, 9));

                  context.save();
                  context.fillStyle = '#000000';
                  context.fillRect(0, 0, canvas.width, canvas.height);
                  context.translate(200, 300);
                  for (var i = 0; i < 4; i = i + 1) {
                    context.translate(0, -50);
                    drawTier(cakeColor, icingColor);
                  }

                  context.translate(-80, 0);
                  for (var j = 0; j < 5; j = j + 1) {
                    drawCandle();
                    context.translate(40, 0);
                  }
                  context.restore();
                }

                drawCake();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#basic_cityscape_stage4_example4


  #challenge4.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 4
          %p
            In the
            %code
              drawBuildingRow()
            function, change the while loop to run as long as
            %span
              %code>
                x < canvas.width
              \.
            We have stored a reference to the canvas in the
            %code
              canvas
            variable, and the width of the canvas is stored in the
            %code
              canvas.width
            property. This will ensure each row of buildings covers the entire width of the canvas.
      .row.py-1
        .col-xs-12
          = image_tag('lessons/basic_cityscape/stage4/challenge4Visual1.png', style: 'background-color: #EEEEEE;')
      .row
        .col-xs-12
          %p
            Draw a gray rectangle (color
            %span
              %code>
                '#CCCCCC'
              )
            at (0, 220) with a width equal to
            %code
              canvas.width
            and a height of
            %span
              %code>
                canvas.height - 220
              \.
            The
            %code
              canvas.height
            property stores the height of the canvas. This will draw a rectangle for
            the ground from y = 220 down to the bottom of the canvas.
          %p
            Draw a row of buildings with a scale of 0.6 at (0, 280). This is the back row of buildings.
          %p
            Draw a row of buildings with a scale of 0.8 at (0, 300). This is the middle row of buildings.
          %p
            Draw a row of buildings with a scale of 1.0 at (0, 320). This is the front row of buildings.
          %p
            Press "Run" multiple times to make sure you are drawing a random cityscape with
            three rows buildings. Each row should cover the width of the canvas, and as the
            rows get farther away, the buildings should get smaller and darker. Once you feel
            satisfied with your drawings, mark the challenge as complete by selecting "Yes, it looks good".
          = render 'lessons/relevant', relevant: [:coordinates, :variables, :functions, :fill_rect, :fill_style, :scale]
          = render 'lessons/code_preview', stage: 4, challenge: 3, editor_id: 'basic_cityscape_stage4_challenge3_editor'

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_challenge4_editor', cols: 12} do
          :preserve
            var canvas = document.getElementById('basic_cityscape_stage4_challenge4');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, w, h, units, floors, windowType, roofType, buildingColor, windowColor) {

              // YOUR CODE FOR DRAWING A BUILDING HERE

            }

            function drawWindow(windowType) {

              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF WINDOWS HERE

            }

            function drawRoof(w, roofType) {

              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF ROOFS HERE

            }

            function randomInteger(min, max) {

              // YOUR CODE FOR GENERATING A RANDOM INTEGER BETWEEN MIN AND MAX, INCLUDING MIN AND MAX, HERE

            }

            function drawBuildingRow(rowX, groundY, scale) {

              // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE

            }

            // DRAW A RECTANGLE WITH THE COLOR #CCCCCC FROM (0, 220) TO THE BOTTOM RIGHT CORNER OF THE CANVAS
            // DRAW A ROW OF RANDOM BUILDINGS AT 0.6 SCALE SITTING ON THE GROUND STARTING AT (0, 280) HERE
            // DRAW A ROW OF RANDOM BUILDINGS AT 0.8 SCALE SITTING ON THE GROUND STARTING AT (0, 300) HERE
            // DRAW A ROW OF RANDOM BUILDINGS AT 1.0 SCALE SITTING ON THE GROUND STARTING AT (0, 320) HERE

      .row.py-1
        .visual.col-xs-12
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#basic_cityscape_stage4_challenge4
          .alert
