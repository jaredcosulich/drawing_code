#dng_scale.lesson
  %h1
    context.scale()
  .description.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Overview
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/overviewVisual1.png', class: 'img-fluid')
          %p
            The
            %code
              context.scale()
            method applies scale factors to the context's coordinate system, making the
            size of drawings larger or smaller. The coordinate system can be scaled in the
            x- and y-directions independently by passing it two values:
          %pre
            %code
              :preserve
                context.scale(x, y);
          %p
            The
            %code
              x
            value scales the coordinate system in the x-direction and the
            %code
              y
            value scales it in the y-direction. For example,
            %code
              context.scale(2.0, 0.5)
            scales the coordinate system so new shapes are drawn twice as wide and half as tall.
            This only applies to shapes drawn after the coordinate system has been scaled.
            Any shapes drawn on the canvas before the coordinate system is scaled are
            unaffected.
          .source
            = link_to('Mozilla Developer\'s Network', 'https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale', target: '_blank')


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Scale a Drawing
          %p
            In this example, we scale the context's coordinate system and then draw a tree.
          %p
            We start by scaling the coordinate system by scale factors of 1 in both the x-
            and y-directions. This does nothing for now, which is what we want. We'll scale
            the coordinate system later.
          %pre
            %code
              :preserve
                context.scale(1, 1); // Apply scale factors to the coordinate system here
          %p
            Then, we draw a tree:
          %pre
            %code
              :preserve
                context.fillStyle = 'Sienna';
                context.fillRect(110, 40, 20, 100); // Draw tree trunk
                context.fillStyle = 'ForestGreen';
                context.beginPath();
                context.arc(120, 40, 30, 0, 2 * Math.PI, false);
                context.fill(); // Draw leaves
          %p
            At this point, we have drawn a yellow house with two windows and a red door at
            the origin of the coordinate system, which is in the top left corner of the canvas.
          %p
            Now, go back up to the top of the program where we set scale factors for the
            coordinate system and change the
            %code
              x
            scale factor to 3.0 and the
            %code
              y
            scale factor to 1.5. When we draw the tree in this new coordinate system, it will
            be three times as wide and 1.5 times as tall on the canvas.
          %pre
            %code
              :preserve
                context.scale(3.0, 1.5);
          %p
            Try changing the scale factors for the coordinate system to other values to see what happens.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example1_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example1');
                var context = canvas.getContext('2d');
                
                context.scale(1, 1); // Apply scale factors to the coordinate system here
                
                context.fillStyle = 'Sienna';
                context.fillRect(110, 40, 20, 100); // Draw tree trunk
                context.fillStyle = 'ForestGreen';
                context.beginPath();
                context.arc(120, 40, 30, 0, 2 * Math.PI, false);
                context.fill(); // Draw leaves

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example1


  #challenge1.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 1
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge1Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Use the
            %code
              context.scale()
            method to apply scale factors to the context's coordinate system so the
            French flag is 2.5 times as wide and 2.5 times as tall.

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge1_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge1');
            var context = canvas.getContext('2d');
            
            context.fillStyle = '#0055A4';
            context.fillRect(20, 20, 40, 80); // Blue bar
            context.fillStyle = '#FFFFFF';
            context.fillRect(60, 20, 40, 80); // White bar
            context.fillStyle = '#EF4135';
            context.fillRect(100, 20, 40, 80); // Red bar

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge1.png')
            %canvas#dng_scale_challenge1
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Scale Multiple Drawings
          %p
            When we use the
            %code
              context.scale()
            method to scale a drawing, it is important to remember that we are scaling
            the entire coordinate system, not just a single drawing.
          %p
            In this example, we scale a row of trees.
          %p
            Since we are drawing more than one tree, we start by defining the
            %code
              drawTree()
            function, which has parameters for the x- and y-coordinates of the tree.
          %pre
            %code
              :preserve
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }
          %p
            Then, we set the scale factors for the coordinate system and draw four
            trees each 80 pixels apart:
          %pre
            %code
              :preserve
                context.scale(1, 1);
                
                drawTree(20, 40);
                drawTree(100, 40);
                drawTree(180, 40);
                drawTree(260, 40);
          %p
            Change the scale factors of the coordinate system to other values to see
            what happens. Not only are the trees scaled, but the distance between the
            trees are scaled as well.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_variables, :dng_functions, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example2_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example2');
                var context = canvas.getContext('2d');
                
                context.scale(1, 1);
                
                drawTree(20, 40);
                drawTree(100, 40);
                drawTree(180, 40);
                drawTree(260, 40);
                
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example2


  #challenge2.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 2
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge2Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Use the
            %code
              context.scale()
            method to apply scale factors to the coordinate system so each French
            flag is drawn 1.4 times as tall.
          %p
            Then, use the
            %code
              drawFrenchFlag()
            function to draw four French flags at the coordinates (40, 20), (240, 20),
            (60, 120), and (260, 120).
          %p
            What value can be used for the
            %code
              x
            scale factor in the
            %code
              context.scale()
            method so the width of the French flags are not scaled?

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge2_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge2');
            var context = canvas.getContext('2d');
            
            // DRAW FOUR FRENCH FLAGS AT (40, 20), (240, 20), (60, 120), AND (260, 120) HERE
            
            function drawFrenchFlag(x, y) {
              context.fillStyle = '#0055A4';
              context.fillRect(x, y, 40, 80);
              context.fillStyle = '#FFFFFF';
              context.fillRect(x + 40, y, 40, 80);
              context.fillStyle = '#EF4135';
              context.fillRect(x + 80, y, 40, 80);
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge2.png')
            %canvas#dng_scale_challenge2
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Combine Multiple Scale Factors
          %p
            In this example, we draw three trees.
          %p
            We draw the first tree at normal scale:
          %pre
            %code
              :preserve
                drawTree(140, 40);
          %p
            We use the
            %code
              context.scale()
            method to scale the coordinate system by a scale factor of 1.5 in both the
            x- and y-directions and draw a second tree:
          %pre
            %code
              :preserve
                context.scale(1.5, 1.5);
                drawTree(140, 40);
          %p
            Finally, we use the
            %code
              context.scale()
            method to scale the coordinate system again by another scale factor of 1.5
            in both the x- and y-directions and draw a third tree:
          %pre
            %code
              :preserve
                context.scale(1.5, 1.5);
                drawTree(140, 40);
          %p
            Note that the third tree isn't 1.5 times as large as the original tree. It is
            1.5 times as large as the second tree and 2.25 times as large as the original
            tree. Because the
            %code
              context.scale()
            method scales the entire coordinate system, the scale factors multiply when
            more than one is applied (1.5 x 1.5 = 2.25).
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_variables, :dng_functions, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example3_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example3');
                var context = canvas.getContext('2d');
                
                drawTree(140, 40); // First tree
                
                context.scale(1.5, 1.5);
                drawTree(140, 40); // Second tree
                
                context.scale(1.5, 1.5);
                drawTree(140, 40); // Third tree
                
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example3


  #challenge3.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 3
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge3Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            The program below draws three rectangles that are all the same size.
          %p
            Use the
            %code
              context.scale()
            method to scale the coordinate system to draw the second rectangle twice
            as wide and three times as tall as the first rectangle.
          %p
            Then, use the
            %code
              context.scale()
            method again to scale the coordinate system to draw the third rectangle four
            times as wide and 1.5 times as tall as the first rectangle.
          %p
            Note the third rectangle is four times as wide and 1.5 times as tall as
            the first rectangle, not the second rectangle.

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge3_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge3');
            var context = canvas.getContext('2d');

            context.fillStyle = 'HotPink';
            context.fillRect(20, 20, 80, 80); // First square
            
            context.scale(2, 3);
            context.fillStyle = 'MediumVioletRed';
            context.fillRect(110, 15, 80, 80); // Second square
            
            context.scale(2, 0.5);
            context.fillStyle = 'RebeccaPurple';
            context.fillRect(5, 90, 80, 80); // Third square
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge3.png')
            %canvas#dng_scale_challenge3
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Restore the Coordinate System After Scaling
          %p
            Sometimes we want to combine our scale factors, like when we are drawing a row of
            trees getting closer and closer. But usually, we want to restore the coordinate
            system after we scale it. Because the transformation matrix for the coordinate system
            is stored in the canvas's drawing state, we can use the
            %code
              context.save()
            and
            %code
              context.restore()
            methods to save the coordinate system and restore it back to its original state.
          %p
            In this example, we start by saving the drawing state when the scale of the
            coordinate system is normal:
          %pre
            %code
              :preserve
                context.save(); // Save the drawing state when the scale is normal
          %p
            Then, we change the scale of the coordinate system, set the
            %code
              context.fillStyle
            property to the color
            %span
              %code>
                'OrangeRed'
              ,
            and draw a line of text:
          %pre
            %code
              :preserve
                context.save(); // Save the drawing state when the scale is normal
                context.scale(2, 2);
                context.fillStyle = 'OrangeRed';
                context.fillText('scale(2, 2)', 10, 10);
                context.restore(); // Restore the drawing state back to when the scale is normal
          %p
            Before changing the scale of the coordinate system again and drawing a second line
            of text, we restore the drawing state we saved earlier. This restores the scale of
            the coordinate system back to normal. Now when we scale the coordinate system two more
            times to draw the second and third lines of text, the scale factors aren't multiplied
            together because we restore the coordinate system between transformations.
          %p
            It's important to note that we need to save the drawing state again immediately after
            restoring it if we want to return to the same drawing state again later. To learn more
            about saving and restoring the drawing state, visit the
            = link_to_lesson('save()/restore()', :dng_save, nil, class: 'reference-link', data: {slug: :dng_save})
            lesson.
          = render 'lessons/relevant', relevant: [:dng_fill_style, :dng_save, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example4_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example4');
                var context = canvas.getContext('2d');
                
                context.font = '16px Arial';
                context.textBaseline = 'top';
                
                context.save(); // Save the drawing state when the scale is normal
                context.scale(2, 2);
                context.fillStyle = 'OrangeRed';
                context.fillText('scale(2, 2)', 10, 10);
                context.restore(); // Restore the drawing state back to when the scale is normal
                
                context.save(); // Save the drawing state when the scale is normal
                context.scale(4, 4);
                context.fillStyle = 'MediumSeaGreen';
                context.fillText('scale(4, 4)', 25, 20);
                context.restore(); // Restore the drawing state back to when the scale is normal
                
                context.save(); // Save the drawing state when the scale is normal
                context.scale(4, 6);
                context.fillStyle = 'SlateBlue';
                context.fillText('scale(4, 6)', 10, 30);
                context.restore(); // Restore the drawing state back to when the scale is normal

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example4


  #challenge4.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 4
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge4Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            The
            %code
              drawTree()
            function is used to draw four trees in the program below.
          %p
            Update the program so the first tree is drawn at normal scale, the second
            tree is drawn 1.4 times as tall as the first tree, the third tree is drawn
            0.8 times as tall as the first tree, and the fourth tree is drawn 1.2 times
            as tall as the first tree.
          %p
            Between transformations, use the
            %code
              context.save()
            and
            %code
              context.restore()
            methods to save and restore the drawing state.

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge4_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge4');
            var context = canvas.getContext('2d');
            
            drawTree(40, 80); // Draw this tree at normal scale
            drawTree(140, 80); // Scale the coordinate system so this tree is drawn 1.3 times taller than the first tree
            drawTree(240, 80); // Scale the coordinate system so this tree is drawn 0.8 times taller than the first tree
            drawTree(340, 80); // Scale the coordinate system so this tree is drawn 1.2 times taller than the first tree
            
            function drawTree(x, y) {
              context.fillStyle = 'Sienna';
              context.fillRect(x - 10, y, 20, 100);
              context.fillStyle = 'ForestGreen';
              context.beginPath();
              context.arc(x, y, 30, 0, 2 * Math.PI, false);
              context.fill();
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge4.png')
            %canvas#dng_scale_challenge4
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Use Translation to Anchor a Scaled Drawing
          %p
            When scaling the trees in the previous challenge, the tops and bottoms of the
            trees were no longer lined up even though all four trees were positioned at the
            same y-coordinate. This is because the
            %code
              context.scale()
            method applies its scale factors to the coordinate system, not individual drawings.
          %p
            When the coordinate system is scaled, every point in the coordinate system moves
            either closer to or farther away from the origin, except the origin itself. Since
            the origin doesn't move, it acts as a kind of anchor point.
          %p
            In this example, we draw two trees. One tree is drawn while the origin of the
            coordinate system is in the top left corner of the canvas. This is the origin's default
            position. Before drawing the other tree, we move the origin to the base of the tree
            using the
            %code
              context.translate()
            method. Because the origin of the coordinate system is positioned at the base of the
            tree, the base of the tree does not move when the coordinate system is scaled.
          %p
            We start by modifying the
            %code
              drawTree()
            function so the bottom center point of the tree is now drawn at the
            %code
              x
            and
            %code
              y
            values passed into the function.
          %pre
            %code
              :preserve
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y - 100, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y - 100, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }
          %p
            We position the first tree normally. The origin of the coordinate system
            is in the top left corner of the canvas and the bottom center point of the
            tree is positioned at (60, 150), which is the point 60 pixels to the right
            of the origin and 150 pixels down.
          %pre
            %code
              :preserve
                context.save();
                context.scale(1, 1); // Scale the coordinate system to draw the first tree
                drawTree(60, 150); // Draw the first tree so its bottom center point is at (60, 150)
                context.restore();
          %p
            Try changing the scale of the coordinate system before the first tree is drawn.
            Increasing the scale moves the tree farther from the origin. Decreasing the scale
            moves it closer.
          %p
            Instead of positioning the second tree by passing in
            %code
              x
            and
            %code
              y
            values, we use the
            %code
              context.translate()
            method to move the origin of the coordinate system to where we want to draw the tree.
            By moving the origin, we can actually position the bottom center point of the tree at
            the origin (0, 0).
          %pre
            %code
              :preserve
                context.save();
                context.translate(320, 280); // Move the origin of the coordinate system to (320, 280)
                context.scale(1, 1); // Scale the coordinate system to draw the second tree
                drawTree(0, 0); // Draw the second tree so its bottom center point is at the origin (0, 0)
                context.restore();
          %p
            Try changing the scale of the coordinate system before the second tree is drawn.
            Because the bottom center point of the tree is at the origin, the bottom center point
            of the tree is anchored and does not move.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_save, :dng_translate, :dng_functions, :dng_variables, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example5_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example5');
                var context = canvas.getContext('2d');
                
                drawGround(150);
                drawGround(280);
                
                context.save();
                context.scale(1, 1); // Scale the coordinate system to draw the first tree
                drawTree(60, 150); // Draw the first tree so its bottom center point is at (60, 150)
                context.restore();
                
                context.save();
                context.translate(320, 280); // Move the origin of the coordinate system to (320, 280)
                context.scale(1, 1); // Scale the coordinate system to draw the second tree
                drawTree(0, 0); // Draw the second tree so its bottom center point is at the origin (0, 0)
                context.restore();
                
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y - 100, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y - 100, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }
                
                function drawGround(y) {
                  context.strokeStyle = 'Black';
                  context.beginPath();
                  context.moveTo(0, y);
                  context.lineTo(canvas.width, y);
                  context.stroke();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example5


  #challenge5.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 5
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge5Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Your drawing should look similar to, but not exactly, like this
          %p
            Define the
            %code
              drawOrnament()
            function with three parameters so it positions the ornament at
            %span
              (
              %code><
                x
              ,
            %span
              %code>
                y
              )
            and fills it with the color
            %span
              %code>
                color
              \.
          %pre
            %code
              :preserve
                function drawOrnament(x, y, color) {
                  context.save();
                  context.translate(x, y);
                  context.fillStyle = color;
                  
                  // DRAW ORNAMENT IN LOCAL COORDINATES HERE
                  
                  context.restore();
                }
          %p
            The ornament is drawn by drawing three rectangles on top of one another
            so the centers of the three rectangles are lined up. Use the dimensions
            in the diagram below to draw the three rectangles.
          = image_tag('lessons/dng_scale/challenge5Visual2.png')
          %p
            Then, copy the
            %code
              drawPineTree()
            function you defined in Challenge 4 and draw some ornaments on the tree inside
            the function definition using local coordinates for the tree. Choose your own ornament
            positions and colors to create an aesthetic drawing. Your drawing will look similar to,
            but not exactly like the image above. Call the
            %code
              drawPineTree()
            function in your program to draw the tree at (100, 40):
          %pre
            %code
              :preserve
                drawPineTree(100, 40);
          %p
            When you re-position the tree, the ornaments should move along with the tree. If your
            program seems to be working, mark the challenge as complete by selecting "Yes, it looks good".
          %p
            If you need help drawing the ornament, visit the relevant lessons to learn more about
            %span
              %code>
                context.fillRect()
              ,
            %span
              %code>
                context.fillStyle
              ,
            and the context's coordinate system.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_coordinates]

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge5_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge5');
            var context = canvas.getContext('2d');

            // DRAW A PINE TREE AT (100, 40)
            
            function drawOrnament(x, y, color) {
              context.save();
              context.translate(x, y);
              context.fillStyle = color;
              
              // DRAW ORNAMENT IN LOCAL COORDINATES HERE
              
              context.restore();
            }
            
            function drawPineTree(x, y) {
              
              // DRAW A PINE TREE IN LOCAL COORDINATES HERE
              
              // DRAW ORNAMENTS ON THE TREE USING LOCAL COORDINATES
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#dng_scale_challenge5
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Anchor Points
          %p
            Right now, we are positioning the yellow house by its top left corner. That's
            the origin we are using for the house's local coordinate system.
          %p
            When drawing a house, it makes sense to use its top left corner as the origin for
            the local coordinate system. But when positioning a house on the canvas, it makes
            more sense to position the house according to where it is sitting on the ground, not
            hanging in the air.
          %p
            In this example, we re-define the
            %code
              drawYellowHouse()
            function so we are passing it the coordinates for its bottom center point, not
            its top left point.
          %p
            We start by changing its parameters from
            %code
              x
            and
            %code
              y
            to
            %code
              centerX
            and
            %span
              %code>
                groundY
              \.
            Then, we save the drawing state as usual and translate the origin of the coordinate
            system to
            %span
              (
              %code><
                centerX
              ,
            %span
              %code>
                groundY
              ),
            which is the anchor point for the house.
          %pre
            %code
              :preserve
                function drawYellowHouse(centerX, groundY) {
                  context.save();
                  context.translate(centerX, groundY); // The house's anchor point
                  
                  // Code to draw the house
                  
                  context.restore();
                }
          %p
            Now, we could use the anchor point as the origin of the local coordinate
            system to draw the house, but that would be a pain. It is easier
            to draw the house when the origin is at the top left corner of the house, not
            at the bottom center point. So, we are going to use the
            %code
              context.translate()
            method again to move the origin before drawing. This gives us the best of
            both worlds: a good anchor point for positioning the house on the canvas and a good origin
            point for drawing the house itself.
          %pre
            %code
              :preserve
                function drawYellowHouse(centerX, groundY) {
                  context.save();
                  context.translate(centerX, groundY); // The house's anchor point
                  context.translate(-60, -100); // The origin for drawing the house
                  
                  // Code to draw the house
                  
                  context.restore();
                }
          %p
            Since we know the house is 120 pixels wide and 100 pixels tall, we can move the
            origin from the bottom center point to the top left corner by moving it left
            60 pixels (half the width) and up 100 pixels. Now that the origin of the coordinate
            system back in the top left corner, we can draw the house just like we did before.
          %pre
            %code
              :preserve
                function drawYellowHouse(centerX, groundY) {
                  context.save();
                  context.translate(centerX, groundY); // The house's anchor point
                  context.translate(-60, -100); // The origin for drawing the house
                  context.fillStyle = '#FFFF00';
                  context.fillRect(0, 0, 120, 100);
                  drawWindow(15, 20);
                  drawWindow(85, 20);
                  drawRedDoor(45, 40);
                  context.restore();
                }
          %p
            Change the value assigned to the variable
            %code
              groundY
            at the top of the program to change the y-coordinate of the ground. We have also
            made minor changes to the
            %code
              drawYellowHouse()
            function so you can see the anchor point of the house and the origin point for
            drawing the house. To show the origin point of the house, uncomment out the first
            call to
            %code
              drawAxes()
            inside the
            %code
              drawYellowHouse()
            function.
          %p
            Visit the relevant lessons to learn more about
            %span
              %code>
                context.fillRect()
              ,
            %span
              %code>
                context.fillStyle
              ,
            %span
              %code>
                context.save()
              ,
            functions, variables, and the context's coordinate system.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_save, :dng_functions, :dng_variables, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example6_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example6');
                var context = canvas.getContext('2d');
                var groundY = 240; // Assign the y-coordinate of the ground
                
                drawTheGround(groundY);
                drawYellowHouse(150, groundY);
                
                function drawYellowHouse(centerX, groundY) {
                  context.save();
                  context.translate(centerX, groundY); // The house's anchor point
                  context.save();
                  context.translate(-60, -100); // The origin for drawing the house
                  context.fillStyle = '#FFFF00';
                  context.fillRect(0, 0, 120, 100);
                  drawWindow(15, 20);
                  drawWindow(85, 20);
                  drawRedDoor(45, 40);
                  //drawAxes(); // Draw axes at the origin point
                  context.restore();
                  drawAxes(); // Draw axes at the anchor point
                  context.restore();
                }
                
                function drawWindow(x, y) {
                  context.save();
                  context.translate(x, y);
                  context.fillStyle = 'White';
                  context.fillRect(0, 0, 20, 40); // White border
                  context.fillStyle = '#99CCFF';
                  context.fillRect(2, 2, 7, 7); // Pane of glass
                  context.fillRect(11, 2, 7, 7);
                  context.fillRect(2, 11, 7, 7);
                  context.fillRect(11, 11, 7, 7);
                  context.fillRect(2, 20, 16, 18);
                  context.restore();
                }
                
                function drawRedDoor(x, y) {
                  context.save();
                  context.translate(x, y);
                  context.fillStyle = '#FF0000';
                  context.fillRect(0, 0, 30, 60); // Red door
                  context.fillStyle = '#99CCFF';
                  context.fillRect(6, 6, 18, 12); // Pane of glass
                  context.fillStyle = '#FFD700';
                  context.fillRect(22, 28, 5, 5); // Door knob
                  context.fillRect(10, 45, 10, 5); // Mail slot
                  context.restore();
                }
                
                function drawTheGround(groundY) {
                  context.save();
                  context.strokeStyle = 'Black';
                  context.beginPath();
                  context.moveTo(0, groundY);
                  context.lineTo(canvas.width, groundY);
                  context.stroke();
                  context.restore();
                }
                
                function drawAxes() {
                  context.save();
                  context.fillStyle = 'Red';
                  context.strokeStyle = 'Red';
                  context.font = '16px Arial';
                  context.textAlign = 'center';
                  context.textBaseline = 'middle';
                  drawPoint(0, 0);
                  drawLine(0, 0, 50, 0);
                  drawArrow(50, 0, 0);
                  context.fillText('x', 60, 0);
                  drawLine(0, 0, 0, 50);
                  drawArrow(0, 50, 0.5 * Math.PI);
                  context.fillText('y', 0, 60);
                  context.restore();
                }
                
                function drawPoint(x, y) {
                  context.beginPath();
                  context.arc(x, y, 3, 0, 2 * Math.PI, false);
                  context.closePath();
                  context.fill();
                }
                
                function drawLine(x1, y1, x2, y2) {
                  context.beginPath();
                  context.moveTo(x1, y1);
                  context.lineTo(x2, y2);
                  context.stroke();
                }
                
                function drawArrow(x, y, angle) {
                  context.save();
                  context.translate(x, y);
                  context.rotate(angle);
                  context.beginPath();
                  context.moveTo(0, 0);
                  context.lineTo(-10, 5);
                  context.lineTo(-10, -5);
                  context.closePath();
                  context.fill();
                  context.restore();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example6


  #challenge6.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 6
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge6Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Copy the
            %code
              drawPineTree()
            function you defined in Challenge 4 (the one without the ornaments), and
            re-define it so you can position a tree on the canvas using the bottom center
            point of the tree as its anchor point.
          %p
            Hint: A pine tree is 100 pixels wide and 240 pixels tall.
          %p
            Then, draw a pine tree positioned on the ground at (150,
            %span
              %code>
                groundY
              ),
            where
            %code
              groundY
            is the local variable storing the y-coordinate of the ground.
          %pre
            %code
              :preserve
                drawPineTree(150, groundY);

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge6_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge6');
            var context = canvas.getContext('2d');
            var groundY = 280; // Assign the y-coordinate of the ground
            
            drawTheGround(groundY);

            // DRAW A PINE TREE AT (150, groundY)
            
            function drawPineTree(centerX, groundY) {
              
              // MOVE THE ORIGIN TO THE ANCHOR POINT HERE
              
              // MOVE THE ORIGN TO THE TOP LEFT CORNER OF THE PINE TREE HERE
              
              // DRAW A PINE TREE IN LOCAL COORDINATES HERE
              
            }
            
            function drawTheGround(groundY) {
              context.save();
              context.strokeStyle = 'Black';
              context.beginPath();
              context.moveTo(0, groundY);
              context.lineTo(canvas.width, groundY);
              context.stroke();
              context.restore();
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge6.png')
            %canvas#dng_scale_challenge6
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Use Translation with Other Transformations
          %p
            While good anchor points are helpful in positioning drawings on the canvas,
            they are necessary when scaling or rotating drawings.
          %p
            In this example, we draw two houses. The anchor point of the green house is
            its top left corner. The anchor point of the yellow house is its bottom center
            point. We can scale both houses by setting a scale factor.
          %p
            Right now, both houses are sitting on the ground with a scale factor of 1.
            Assign the local variable
            %code
              scaleFactor
            at the top of the program a value of 1.2 to see what happens.
          %pre
            %code
              :preserve
                var scaleFactor = 1.2;
          %p
            While both houses scale, only the yellow house remains anchored on the ground.
            Note that the anchor point does not move when a house is scaled.
          %p
            Visit the relevant lessons to learn more about
            %span
              %code>
                context.fillRect()
              ,
            %span
              %code>
                context.fillStyle
              ,
            %span
              %code>
                context.save()
              ,
            %span
              %code>
                context.scale()
              ,
            functions, variables, and the context's coordinate system.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_save, :scale, :dng_functions, :dng_variables, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example7_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example7');
                var context = canvas.getContext('2d');
                var groundY = 220; // Assign the y-coordinate of the ground
                var scaleFactor = 1; // Assign the scale factor of the houses
                
                drawTheGround(groundY);
                drawGreenHouse(10, groundY - 100);
                drawYellowHouse(290, groundY);
                
                function drawYellowHouse(centerX, groundY) {
                  context.save();
                  context.translate(centerX, groundY); // The house's anchor point
                  context.scale(scaleFactor, scaleFactor);
                  context.save();
                  context.translate(-60, -100); // The origin for drawing the house
                  context.fillStyle = '#FFFF00';
                  context.fillRect(0, 0, 120, 100);
                  drawWindow(15, 20);
                  drawWindow(85, 20);
                  drawRedDoor(45, 40);
                  context.restore();
                  drawAxes(); // Draw axes at the anchor point
                  context.restore();
                }
                
                function drawGreenHouse(x, y) {
                  context.save();
                  context.translate(x, y); // The house's anchor point and origin for drawing the house
                  context.scale(scaleFactor, scaleFactor);
                  context.fillStyle = '#00FF00';
                  context.fillRect(0, 0, 120, 100);
                  drawWindow(15, 20);
                  drawWindow(85, 20);
                  drawRedDoor(45, 40);
                  drawAxes(); // Draw axes at the anchor point
                  context.restore();
                }
                
                function drawWindow(x, y) {
                  context.save();
                  context.translate(x, y);
                  context.fillStyle = 'White';
                  context.fillRect(0, 0, 20, 40); // White border
                  context.fillStyle = '#99CCFF';
                  context.fillRect(2, 2, 7, 7); // Pane of glass
                  context.fillRect(11, 2, 7, 7);
                  context.fillRect(2, 11, 7, 7);
                  context.fillRect(11, 11, 7, 7);
                  context.fillRect(2, 20, 16, 18);
                  context.restore();
                }
                
                function drawRedDoor(x, y) {
                  context.save();
                  context.translate(x, y);
                  context.fillStyle = '#FF0000';
                  context.fillRect(0, 0, 30, 60); // Red door
                  context.fillStyle = '#99CCFF';
                  context.fillRect(6, 6, 18, 12); // Pane of glass
                  context.fillStyle = '#FFD700';
                  context.fillRect(22, 28, 5, 5); // Door knob
                  context.fillRect(10, 45, 10, 5); // Mail slot
                  context.restore();
                }
                
                function drawTheGround(groundY) {
                  context.save();
                  context.strokeStyle = 'Black';
                  context.beginPath();
                  context.moveTo(0, groundY);
                  context.lineTo(canvas.width, groundY);
                  context.stroke();
                  context.restore();
                }
                
                function drawAxes() {
                  context.save();
                  context.fillStyle = 'Red';
                  context.strokeStyle = 'Red';
                  context.font = '16px Arial';
                  context.textAlign = 'center';
                  context.textBaseline = 'middle';
                  drawPoint(0, 0);
                  drawLine(0, 0, 50, 0);
                  drawArrow(50, 0, 0);
                  context.fillText('x', 60, 0);
                  drawLine(0, 0, 0, 50);
                  drawArrow(0, 50, 0.5 * Math.PI);
                  context.fillText('y', 0, 60);
                  context.restore();
                }
                
                function drawPoint(x, y) {
                  context.beginPath();
                  context.arc(x, y, 3, 0, 2 * Math.PI, false);
                  context.closePath();
                  context.fill();
                }
                
                function drawLine(x1, y1, x2, y2) {
                  context.beginPath();
                  context.moveTo(x1, y1);
                  context.lineTo(x2, y2);
                  context.stroke();
                }
                
                function drawArrow(x, y, angle) {
                  context.save();
                  context.translate(x, y);
                  context.rotate(angle);
                  context.beginPath();
                  context.moveTo(0, 0);
                  context.lineTo(-10, 5);
                  context.lineTo(-10, -5);
                  context.closePath();
                  context.fill();
                  context.restore();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example7
