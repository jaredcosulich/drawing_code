#dng_scale.page
  %h1
    context.scale()
  .description.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Overview
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/overviewVisual1.png', class: 'img-fluid canvas-example')
          %p
            The
            %code
              context.scale()
            method applies scale factors to the context's coordinate system, making the
            size of drawings larger or smaller. The coordinate system can be scaled in the
            x- and y-directions independently by passing it two values:
          %pre
            %code
              :preserve
                context.scale(x, y);
          %p
            The
            %code
              x
            value scales the coordinate system in the x-direction and the
            %code
              y
            value scales it in the y-direction. For example,
            %code
              context.scale(2.0, 0.5)
            scales the coordinate system so new shapes are drawn twice as wide and half as tall.
            This only applies to shapes drawn after the coordinate system has been scaled.
            Any shapes drawn on the canvas before the coordinate system is scaled are
            unaffected.
          .source
            = link_to('Mozilla Developer\'s Network', 'https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale', target: '_blank')


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Scale a Drawing
          %p
            In this example, we scale the context's coordinate system and then draw a tree.
          %p
            We start by scaling the coordinate system by scale factors of 1 in both the x-
            and y-directions. This does nothing for now, which is what we want. We'll scale
            the coordinate system later.
          %pre
            %code
              :preserve
                context.scale(1, 1); // Apply scale factors to the coordinate system here
          %p
            Then, we draw a tree:
          %pre
            %code
              :preserve
                context.fillStyle = 'Sienna';
                context.fillRect(110, 40, 20, 100); // Draw tree trunk
                context.fillStyle = 'ForestGreen';
                context.beginPath();
                context.arc(120, 40, 30, 0, 2 * Math.PI, false);
                context.fill(); // Draw leaves
          %p
            At this point, we have drawn the tree with the coordinate system at normal scale.
          %p
            Now, go back up to the top of the program where we set scale factors for the
            coordinate system and change the
            %code
              x
            scale factor to 3.0 and the
            %code
              y
            scale factor to 1.5. When we draw the tree in this new coordinate system, it will
            be three times as wide and 1.5 times as tall on the canvas.
          %pre
            %code
              :preserve
                context.scale(3.0, 1.5);
          %p
            Try changing the scale factors for the coordinate system to other values to see what happens.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example1_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example1');
                var context = canvas.getContext('2d');
                
                context.scale(1, 1); // Apply scale factors to the coordinate system here
                
                context.fillStyle = 'Sienna';
                context.fillRect(110, 40, 20, 100); // Draw tree trunk
                context.fillStyle = 'ForestGreen';
                context.beginPath();
                context.arc(120, 40, 30, 0, 2 * Math.PI, false);
                context.fill(); // Draw leaves

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example1


  #challenge1.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 1
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge1Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Use the
            %code
              context.scale()
            method to apply scale factors to the context's coordinate system so the
            French flag is 2.5 times as wide and 2.5 times as tall.

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge1_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge1');
            var context = canvas.getContext('2d');
            
            context.fillStyle = '#0055A4';
            context.fillRect(20, 20, 40, 80); // Blue bar
            context.fillStyle = '#FFFFFF';
            context.fillRect(60, 20, 40, 80); // White bar
            context.fillStyle = '#EF4135';
            context.fillRect(100, 20, 40, 80); // Red bar

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge1.png')
            %canvas#dng_scale_challenge1
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Scale Multiple Drawings
          %p
            When we use the
            %code
              context.scale()
            method to scale a drawing, it is important to remember that we are scaling
            the entire coordinate system, not just a single drawing.
          %p
            In this example, we scale a row of trees.
          %p
            Since we are drawing more than one tree, we start by defining the
            %code
              drawTree()
            function, which has parameters for the x- and y-coordinates of the tree.
          %pre
            %code
              :preserve
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }
          %p
            Then, we set the scale factors for the coordinate system and draw four
            trees each 80 pixels apart:
          %pre
            %code
              :preserve
                context.scale(1, 1);
                
                drawTree(20, 40);
                drawTree(100, 40);
                drawTree(180, 40);
                drawTree(260, 40);
          %p
            Change the scale factors of the coordinate system to other values to see
            what happens. Not only are the trees scaled, but the distance between the
            trees are scaled as well.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_variables, :dng_functions, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example2_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example2');
                var context = canvas.getContext('2d');
                
                context.scale(1, 1);
                
                drawTree(20, 40);
                drawTree(100, 40);
                drawTree(180, 40);
                drawTree(260, 40);
                
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example2


  #challenge2.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 2
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge2Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Use the
            %code
              context.scale()
            method to apply scale factors to the coordinate system so each French
            flag is drawn 1.4 times as tall.
          %p
            Then, use the
            %code
              drawFrenchFlag()
            function to draw four French flags at the coordinates (40, 20), (240, 20),
            (60, 120), and (260, 120).
          %p
            What value can be used for the
            %code
              x
            scale factor in the
            %code
              context.scale()
            method so the widths of the French flags are not scaled?

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge2_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge2');
            var context = canvas.getContext('2d');
            
            // DRAW FOUR FRENCH FLAGS AT (40, 20), (240, 20), (60, 120), AND (260, 120) HERE
            
            function drawFrenchFlag(x, y) {
              context.fillStyle = '#0055A4';
              context.fillRect(x, y, 40, 80);
              context.fillStyle = '#FFFFFF';
              context.fillRect(x + 40, y, 40, 80);
              context.fillStyle = '#EF4135';
              context.fillRect(x + 80, y, 40, 80);
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge2.png')
            %canvas#dng_scale_challenge2
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Combine Multiple Scale Factors
          %p
            In this example, we draw three trees.
          %p
            We draw the first tree at normal scale:
          %pre
            %code
              :preserve
                drawTree(140, 40);
          %p
            We use the
            %code
              context.scale()
            method to scale the coordinate system by a scale factor of 1.5 in both the
            x- and y-directions and draw a second tree:
          %pre
            %code
              :preserve
                context.scale(1.5, 1.5);
                drawTree(140, 40);
          %p
            Finally, we use the
            %code
              context.scale()
            method to scale the coordinate system again by another scale factor of 1.5
            in both the x- and y-directions and draw a third tree:
          %pre
            %code
              :preserve
                context.scale(1.5, 1.5);
                drawTree(140, 40);
          %p
            Note that the third tree isn't 1.5 times as large as the original tree. It is
            1.5 times as large as the second tree and 2.25 times as large as the original
            tree. Because the
            %code
              context.scale()
            method scales the entire coordinate system, the scale factors multiply when
            more than one is applied (1.5 x 1.5 = 2.25).
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_variables, :dng_functions, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example3_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example3');
                var context = canvas.getContext('2d');
                
                drawTree(140, 40); // First tree
                
                context.scale(1.5, 1.5);
                drawTree(140, 40); // Second tree
                
                context.scale(1.5, 1.5);
                drawTree(140, 40); // Third tree
                
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example3


  #challenge3.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 3
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge3Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            The program below draws three rectangles that are all the same size.
          %p
            Use the
            %code
              context.scale()
            method to scale the coordinate system to draw the second rectangle twice
            as wide and three times as tall as the first rectangle.
          %p
            Then, use the
            %code
              context.scale()
            method again to scale the coordinate system to draw the third rectangle four
            times as wide and 1.5 times as tall as the first rectangle.
          %p
            Note the third rectangle is four times as wide and 1.5 times as tall as
            the first rectangle, not the second rectangle. Figure out scale factors
            to make this work.

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge3_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge3');
            var context = canvas.getContext('2d');

            context.fillStyle = 'HotPink';
            context.fillRect(20, 20, 80, 80); // First square
            
            context.fillStyle = 'MediumVioletRed';
            context.fillRect(110, 15, 80, 80); // Second square
            
            context.fillStyle = 'RebeccaPurple';
            context.fillRect(5, 90, 80, 80); // Third square
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge3.png')
            %canvas#dng_scale_challenge3
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Restore the Coordinate System After Scaling
          %p
            Sometimes we want to combine our scale factors, like when we are drawing a row of
            trees getting closer and closer. But usually, we want to restore the coordinate
            system after we scale it. Because the transformation matrix for the coordinate system
            is stored in the canvas's drawing state, we can use the
            %code
              context.save()
            and
            %code
              context.restore()
            methods to save the coordinate system and restore it back to its original state.
          %p
            In this example, we start by saving the drawing state when the scale of the
            coordinate system is normal:
          %pre
            %code
              :preserve
                context.save(); // Save the drawing state when the scale is normal
          %p
            Then, we change the scale of the coordinate system, set the
            %code
              context.fillStyle
            property to the color
            %span
              %code>
                'OrangeRed'
              ,
            and draw a line of text:
          %pre
            %code
              :preserve
                context.save(); // Save the drawing state when the scale is normal
                context.scale(2, 2);
                context.fillStyle = 'OrangeRed';
                context.fillText('scale(2, 2)', 10, 10);
                context.restore(); // Restore the drawing state back to when the scale is normal
          %p
            Before changing the scale of the coordinate system again and drawing a second line
            of text, we restore the drawing state we saved earlier. This restores the scale of
            the coordinate system back to normal. Now when we scale the coordinate system two more
            times to draw the second and third lines of text, the scale factors aren't multiplied
            together because we restore the coordinate system between transformations.
          %p
            It's important to note that we need to save the drawing state again immediately after
            restoring it if we want to return to the same drawing state again later. To learn more
            about saving and restoring the drawing state, visit the
            = link_to_lesson('save()/restore()', :dng_save, nil, class: 'reference-link', data: {slug: :dng_save})
            lesson.
          = render 'lessons/relevant', relevant: [:dng_fill_style, :dng_save, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example4_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example4');
                var context = canvas.getContext('2d');
                
                context.font = '16px Arial';
                context.textBaseline = 'top';
                
                context.save(); // Save the drawing state when the scale is normal
                context.scale(2, 2);
                context.fillStyle = 'OrangeRed';
                context.fillText('scale(2, 2)', 10, 10);
                context.restore(); // Restore the drawing state back to when the scale is normal
                
                context.save(); // Save the drawing state when the scale is normal
                context.scale(4, 4);
                context.fillStyle = 'MediumSeaGreen';
                context.fillText('scale(4, 4)', 25, 20);
                context.restore(); // Restore the drawing state back to when the scale is normal
                
                context.save(); // Save the drawing state when the scale is normal
                context.scale(4, 6);
                context.fillStyle = 'SlateBlue';
                context.fillText('scale(4, 6)', 10, 30);
                context.restore(); // Restore the drawing state back to when the scale is normal

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example4


  #challenge4.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 4
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge4Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            The
            %code
              drawTree()
            function is used to draw four trees in the program below.
          %p
            Update the program so the first tree is drawn at normal scale, but the second,
            third, and fourth trees are drawn 1.3, 0.8, and 1.2 times as tall as the first
            tree, respectively.
          %p
            Between transformations, use the
            %code
              context.save()
            and
            %code
              context.restore()
            methods to save and restore the drawing state.

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge4_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge4');
            var context = canvas.getContext('2d');
            
            drawTree(40, 80); // Draw this tree at normal scale
            drawTree(140, 80); // Scale the coordinate system so this tree is drawn 1.3 times taller than the first tree
            drawTree(240, 80); // Scale the coordinate system so this tree is drawn 0.8 times taller than the first tree
            drawTree(340, 80); // Scale the coordinate system so this tree is drawn 1.2 times taller than the first tree
            
            function drawTree(x, y) {
              context.fillStyle = 'Sienna';
              context.fillRect(x - 10, y, 20, 100);
              context.fillStyle = 'ForestGreen';
              context.beginPath();
              context.arc(x, y, 30, 0, 2 * Math.PI, false);
              context.fill();
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge4.png')
            %canvas#dng_scale_challenge4
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Use Translation to Anchor a Scaled Drawing
          %p
            When scaling the trees in the previous challenge, the tops and bottoms of the
            trees were no longer lined up even though all four trees were positioned at the
            same y-coordinate. This is because the
            %code
              context.scale()
            method applies its scale factors to the coordinate system, not individual drawings.
          %p
            When the coordinate system is scaled, every point in the coordinate system moves
            either closer to or farther away from the origin, except the origin itself. Since
            the origin doesn't move, it acts as a kind of anchor point.
          %p
            In this example, we draw two trees. One tree is drawn while the origin of the
            coordinate system is in the top left corner of the canvas. This is the origin's default
            position. Before drawing the other tree, we move the origin to the base of the tree
            using the
            %code
              context.translate()
            method. Because the origin of the coordinate system is positioned at the base of the
            tree, the base of the tree does not move when the coordinate system is scaled.
          %p
            We start by modifying the
            %code
              drawTree()
            function so the bottom center point of the tree is now drawn at the
            %code
              x
            and
            %code
              y
            values passed into the function.
          %pre
            %code
              :preserve
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y - 100, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y - 100, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }
          %p
            We position the first tree normally. The origin of the coordinate system
            is in the top left corner of the canvas and the bottom center point of the
            tree is positioned at (60, 150), which is the point 60 pixels to the right
            of the origin and 150 pixels down.
          %pre
            %code
              :preserve
                context.save();
                context.scale(1, 1); // Scale the coordinate system to draw the first tree
                drawTree(60, 150); // Draw the first tree so its bottom center point is at (60, 150)
                context.restore();
          %p
            Try changing the scale of the coordinate system before the first tree is drawn.
            Increasing the scale moves the tree farther from the origin. Decreasing the scale
            moves it closer.
          %p
            Instead of positioning the second tree by passing in
            %code
              x
            and
            %code
              y
            values, we use the
            %code
              context.translate()
            method to move the origin of the coordinate system to where we want to draw the tree.
            By moving the origin, we can actually position the bottom center point of the tree at
            the origin (0, 0).
          %pre
            %code
              :preserve
                context.save();
                context.translate(320, 280); // Move the origin of the coordinate system to (320, 280)
                context.scale(1, 1); // Scale the coordinate system to draw the second tree
                drawTree(0, 0); // Draw the second tree so its bottom center point is at the origin (0, 0)
                context.restore();
          %p
            Try changing the scale of the coordinate system before the second tree is drawn.
            Because the bottom center point of the tree is at the origin, the bottom center point
            of the tree is anchored and does not move.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_save, :dng_translate, :dng_functions, :dng_variables, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example5_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example5');
                var context = canvas.getContext('2d');
                
                drawGround(150);
                drawGround(280);
                
                context.save();
                context.scale(1, 1); // Scale the coordinate system to draw the first tree
                drawTree(60, 150); // Draw the first tree so its bottom center point is at (60, 150)
                context.restore();
                
                context.save();
                context.translate(320, 280); // Move the origin of the coordinate system to (320, 280)
                context.scale(1, 1); // Scale the coordinate system to draw the second tree
                drawTree(0, 0); // Draw the second tree so its bottom center point is at the origin (0, 0)
                context.restore();
                
                function drawTree(x, y) {
                  context.fillStyle = 'Sienna';
                  context.fillRect(x - 10, y - 100, 20, 100);
                  context.fillStyle = 'ForestGreen';
                  context.beginPath();
                  context.arc(x, y - 100, 30, 0, 2 * Math.PI, false);
                  context.fill();
                }
                
                function drawGround(y) {
                  context.strokeStyle = 'Black';
                  context.beginPath();
                  context.moveTo(0, y);
                  context.lineTo(canvas.width, y);
                  context.stroke();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example5


  #challenge5.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 5
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge5Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            The program below draws three blue frames that are all the same size. The
            first frame is positioned at the coordinates (20, 20), the second at (180, 80),
            and the third at (60, 140).
          %p
            Use the
            %code
              context.scale()
            method to scale each frame so the first frame is 4 times wider and 3 times
            taller, the second frame is 3 times wider and 3.5 times taller, and the third
            frame is 4 times wider and 2 times taller.
          %p
            However, before scaling the frames, use the
            %code
              context.translate()
            method to anchor the top left corner of each frame at the origin of the
            coordinate system so the top left corner of the frame doesn't move when the coordinate system is
            scaled. This means that, instead of using
            %code
              drawFrame(20, 20, 'MediumBlue')
            to position the first frame, position the frame at (20, 20) using the
            %code
              context.translate()
            method and then draw the frame using
            %span
              %code>
                drawFrame(0, 0, 'MediumBlue')
              \.
          %p
            Remember to save and restore the drawing state before and after translating
            and scaling the coordinate system and drawing each frame.

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge5_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge5');
            var context = canvas.getContext('2d');

            drawFrame(20, 20, 'MediumBlue'); // Scale the frame so it is 4 times wider and 3 times taller
            drawFrame(180, 80, 'DodgerBlue'); // Scale the frame so it is 3 times wider and 3.5 times taller
            drawFrame(60, 140, 'LightSkyBlue'); // Scale the frame so it is 4 times wider and 2 times taller
            
            function drawFrame(x, y, color) {
              context.fillStyle = color;
              context.fillRect(x, y, 60, 4);
              context.fillRect(x, y, 4, 60);
              context.fillRect(x + 56, y, 4, 60);
              context.fillRect(x, y + 56, 60, 4);
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge5.png')
            %canvas#dng_scale_challenge5
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Create a Vanishing Point
          %p
            In this example, we use the
            %code
              context.translate()
            and
            %code
              context.scale()
            methods to create a vanishing point on the horizon to give our drawing a 3D effect.
          %p
            If we use the
            %code
              context.scale()
            method to scale the coordinate system down, shapes will be drawn smaller and
            closer to the origin. If we keep scaling the coordinate system down, those shapes
            will eventually vanish into the origin.
          %p
            We start by using the
            %code
              context.translate()
            method to position the origin of the coordinate system. The position of the
            origin will be the position of our vanishing point.
          %pre
            %code
              :preserve
                var x = 240;
                var y = 280; // Coordinates of the vanishing point
                
                context.save() // Save the original drawing state
                context.translate(x, y); // Move the origin to the vanishing point on the canvas
          %p
            To make the vanishing point and horizon easier to see, we draw a line at the
            horizon and a dot at the vanishing point:
          %pre
            %code
              :preserve
                drawHorizon();
                drawVanishingPoint();
          %p
            Then, we set up a for loop to repeatedly scale the coordinate system and draw
            two squares. The for loop runs through the loop eight times.
          %pre
            %code
              :preserve
                for (var i = 0; i < 8; i = i + 1) {
                  context.scale(1.26, 1.26);
                  drawSquare(5, -40); // The square to the right of the vanishing point
                  drawSquare(-40, -30); // The square to the left of the vanishing point
                }
          %p
            Each time through the for loop, we scale the coordinate system using a scale
            factor of 1.26 in both the x- and y-directions. Because we are not saving and
            restoring the drawing state between transformations, our scale factors are
            combining, which is what we want in this situation. We want to keep scaling the
            coordinate system so the drawings get larnger and larger.
          %p
            Finally, we use the
            %code
              drawSquare()
            function to draw two squares, both with a width and height of 20, filled
            with the color
            %span
              %code>
                'DarkOrange'
              ,
            and outlined in the color
            %span
              %code>
                'DarkRed'
              \.
            The first square is positioned at (-40, -30) and the second square is positioned
            at (5, -40).
          %p
            Note that the two squares are drawn at the same positions for each loop. Because
            we are scaling the coordinate systems, the squares appear to be moving toward us
            from the vanishing point. Change the positions of the vanishing point and the two
            squares in the for loop to see what happens.
          %p
            To learn more about for loops, visit the
            = link_to_lesson('For Loops', :dng_for_loops, nil, class: 'reference-link', data: {slug: :dng_for_loops})
            lesson.
          = render 'lessons/relevant', relevant: [:dng_fill_rect, :dng_fill_style, :dng_save, :dng_translate, :dng_for_loops, :dng_functions, :dng_variables, :dng_coordinates]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_example6_editor'} do
              :preserve
                var canvas = document.getElementById('dng_scale_example6');
                var context = canvas.getContext('2d');
                
                var x = 240;
                var y = 280; // Coordinates of the vanishing point
                
                context.save(); // Save the original drawing state
                context.translate(x, y); // Move the origin to the vanishing point on the canvas
                
                drawHorizon();
                drawVanishingPoint();
                
                for (var i = 0; i < 8; i = i + 1) {
                  context.scale(1.26, 1.26);
                  drawSquare(5, -40); // The square to the right of the vanishing point
                  drawSquare(-40, -30); // The square to the left of the vanishing point
                }
                
                context.restore(); // Restore the original drawing state
                
                function drawSquare(x, y) {
                  context.save();
                  context.fillStyle = 'DarkOrange';
                  context.fillRect(x, y, 20, 20);
                  context.strokeStyle = 'DarkRed';
                  context.strokeRect(x, y, 20, 20);
                  context.restore();
                }
                
                function drawHorizon() {
                  context.save();
                  context.strokeStyle = 'Black';
                  context.beginPath();
                  context.moveTo(-x, 0);
                  context.lineTo(Math.abs(x) + canvas.width, 0);
                  context.stroke();
                  context.restore();
                }
                
                function drawVanishingPoint() {
                  context.save();
                  context.fillStyle = 'Black';
                  context.beginPath();
                  context.arc(0, 0, 3, 0, 2 * Math.PI, false);
                  context.fill();
                  context.restore();
                }

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#dng_scale_example6


  #challenge6.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 5
          %figure.float-xs-right.px-2
            = image_tag('lessons/dng_scale/challenge6Visual1.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small What your drawing should look like
          %p
            Update the program below to draw six trees so they appear to moving toward
            us from a vanishing point.
          %p
            Position the vanishing point at the coordinates (-80, 140). Note that this
            point is outside the left edge of the canvas, so we want actually see it on the canvas.
          %p
            Use the
            %code
              drawTree()
            function to draw the trees at position (120, 45). Before drawing a
            tree, scale the coordinate system by a scale factor of 1.2 in both the x-
            and y-directions. Allow the scale factors to multiply.

      .row.py-1
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'dng_scale_challenge6_editor'} do
          :preserve
            var canvas = document.getElementById('dng_scale_challenge6');
            var context = canvas.getContext('2d');

            var x = 0;
            var y = 0; // Coordinates of the vanishing point
            
            context.save(); // Save the original drawing state
            context.translate(x, y); // Move the origin to the vanishing point on the canvas
            
            drawHorizon();
            drawVanishingPoint();
            
            for (var i = 0; i < 1; i = i + 1) {
              // SCALE THE COORDINATE SYSTEM HERE
              // DRAW THE TREE HERE
            }
            
            context.restore(); // Restore the original drawing state
            
            function drawTree(x, y) {
              context.fillStyle = 'Sienna';
              context.fillRect(x - 5, y - 50, 10, 50);
              context.fillStyle = 'ForestGreen';
              context.beginPath();
              context.arc(x, y - 50, 15, 0, 2 * Math.PI, false);
              context.fill();
            }
            
            function drawHorizon() {
              context.save();
              context.strokeStyle = 'Black';
              context.beginPath();
              context.moveTo(-x, 0);
              context.lineTo(Math.abs(x) + canvas.width, 0);
              context.stroke();
              context.restore();
            }
            
            function drawVanishingPoint() {
              context.save();
              context.fillStyle = 'Black';
              context.beginPath();
              context.arc(0, 0, 3, 0, 2 * Math.PI, false);
              context.fill();
              context.restore();
            }
            
        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/dng_scale/challenge6.png')
            %canvas#dng_scale_challenge6
          .alert
