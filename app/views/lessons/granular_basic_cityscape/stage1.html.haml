- stage_index = 1
- challenge_index = 0

#granular_basic_cityscape_stage1.page
  %h1 Stage 1

  .description.row.py-4
    .col-xs-6
      %h2.py-2
        Overview
      %p
        In the first stage of the Cityscape Challenge, we will draw the shapes of
        buildings with different sizes. Because we will be drawing lots of buildings,
        we will automate the process using functions and variables.

    .col-xs-6
      = image_tag('lessons/granular_basic_cityscape/stage1/overviewVisual1.png', class: 'img-fluid')

  #section1.section.py-2 &nbsp;

  .lesson.row
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Drawing In The Coordinate System

          .float-xs-right.mx-2
            = image_tag('lessons/coordinates/reference.png', class: 'img-fluid')

          %p
            When drawing on canvas it is important to understand how the
            = link_to_lesson('coordinate system', :coordinates, nil, class: 'reference-link', data: {slug: :coordinates})
            works, specifically that
            %span.highlight "y" values go down.
          %p
            Unlike with a normal graph, where the positive "y" values go up, in the canvas
            positive "y" values go down from the top.
          %p
            So the point (50, 100) is 50 pixels from the right of the top left corner of the canvas and
            100 pixels down from the top left corner.
          %p
            In the example below, the black square is at (0, 0) so it's top left corner
            is in the top left corner of the canvas. The blue square is at (50, 100)
            so it's top left corner is 50 pixels to the right and 100 pixels down.
          %p
            Try adjusting the coordinates of the two squares and see how they move around
            the coordinate system.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_lesson1_editor'} do
              :preserve
                var canvas = document.getElementById('granular_basic_cityscape_stage1_lesson1');
                var context = canvas.getContext('2d');

                context.fillRect(0, 0, 50, 50);

                context.fillStyle = 'blue';
                context.fillRect(50, 100, 50, 50);


            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#granular_basic_cityscape_stage1_lesson1

  - challenge_index += 1
  #challenge1.challenge.row.py-4
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 1

          %figure.float-xs-right.pl-2
            = image_tag('lessons/granular_basic_cityscape/stage1/challenge1Example.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 1 Sample Solution

          %p
            Draw a rectangle using the code
            %code fillRect(x, y, width, height)
            where you replace x with the top left x coordinate, y with the top left y coordinate,
            width with the width of the rectangle and height with the height of the rectangle.
          %p
            Draw the rectangle so that it's top left corner is 60px to the right of the top
            left corner of the canvas and 90px down. The rectangle should be 45px wide (width) and
            45px tall (height).

          %p In the end your drawing should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_style, :fill_rect]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_challenge1_editor'} do
          :preserve
            var canvas = document.getElementById('granular_basic_cityscape_stage1_challenge1');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/granular_basic_cityscape/stage1/challenge1.png')
            %canvas#granular_basic_cityscape_stage1_challenge1
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            context.fillRect(60, 90, 45, 45);




  #section2.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: The Ground

          %p
            When drawing a cityscape you need to to draw all of the buildings
            sitting on the ground.
          %p
            This complicates our drawing because we need to draw each building
            as a rectangle that starts from the top left corner, but we need
            to draw it relative to the ground, not the top.
          %p
            This example shows the ground as a simple line, 240px from the top
            of the canvas.

          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_lesson2_editor'} do
              :preserve
                var canvas = document.getElementById('granular_basic_cityscape_stage1_lesson2');
                var context = canvas.getContext('2d');

                context.fillRect(0, 240, canvas.width, 5);


            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#granular_basic_cityscape_stage1_lesson2

  - challenge_index += 1
  #challenge2.challenge.row.py-4
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 2

          %figure.float-xs-right.pl-2
            = image_tag('lessons/granular_basic_cityscape/stage1/challenge2Example.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 2 Sample Solution

          %p
            Try drawing the ground yourself. The only important variable in the
            ground drawing is the height from the top of the canvas.
          %p
            So uncomment out the ground variable and fill in the correct value to
            place the ground 260px from the top of the canvas.

          %p In the end your drawing should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_style, :fill_rect]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_challenge2_editor'} do
          :preserve
            var canvas = document.getElementById('granular_basic_cityscape_stage1_challenge2');
            var context = canvas.getContext('2d');

            // Set the ground variable properly.
            var ground =

            context.fillRect(0, ground, canvas.width, 5);

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/granular_basic_cityscape/stage1/challenge2.png')
            %canvas#granular_basic_cityscape_stage1_challenge2
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            // Set the ground variable properly.
            var ground = 260;

            context.fillRect(0, ground, canvas.width, 5);



  #section3.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Draw a Building
          %p
            In our drawing a building will be a rectangle. We use context.fillRect() to draw the rectangle,
            just as we did above.
          %p
            In this example, we draw a building that is
            %span.highlight 160 pixels wide, 240 pixels tall,
            and positioned so its
            %span.highlight top left corner is at (100, 50)
            with it's bottom touching the ground.
          %p
            Remember: In the context's
            = link_to_lesson('coordinate system', :coordinates, nil, class: 'reference-link', data: {slug: :coordinates})
            the origin (0, 0) is at the top left corner of the canvas.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_lesson3_editor'} do
              :preserve
                var canvas = document.getElementById('granular_basic_cityscape_stage1_lesson3');
                var context = canvas.getContext('2d');

                // THE GROUND
                context.fillRect(0, 290, canvas.width, 3);

                // THE BUILDING
                context.fillRect(100, 290 - 240, 160, 240);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#granular_basic_cityscape_stage1_lesson3

  - challenge_index += 1
  #challenge3.challenge.row.py-4
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 3

          %figure.float-xs-right.px-2
            = image_tag('lessons/granular_basic_cityscape/stage1/challenge3Example.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 3 Sample Solution

          %p
            Draw a building (a rectangle) that is
            %span.highlight 320 pixels wide and 160 pixels tall.
            Make sure the bottom of the building rests on the ground
            which is
            %span.highlight 240 pixels from the top.
            The building should also be
            %span.highlight 40 pixels from the left, so the
            bottom left corner of the building is covering the x at (40, 240)
            and the top right corner is covering the other x, but not covering the red x's.
          %p
            Remember the you need to draw from the top left corner, not from the ground.
            You'll need to calculate the top of the building.

          %p In the end your building should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_style, :fill_rect]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_challenge3_editor'} do
          :preserve
            var canvas = document.getElementById('granular_basic_cityscape_stage1_challenge3');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/granular_basic_cityscape/stage1/challenge3.png')
            %canvas#granular_basic_cityscape_stage1_challenge3
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var ground = 240;
            context.fillRect(40, ground - 160, 320, 160);


  #section4.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Draw a Colored Building
          %p
            Our buildings will be different colors to show shadows and depth.
          %p
            In this example, we will draw
            %span.higlight a building that is blue and one that is red.
          %p
            The context.fillStyle property allows us to change the color of the building.
          %p
            There are a number of ways to define the color, as shown in the
            = link_to_lesson('fillStyle', :fill_style, nil, class: 'reference-link', data: {slug: :fill_style})
            lesson.

          = render 'lessons/relevant', relevant: [:coordinates, :fill_rect, :fill_style]


        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_lesson4_editor'} do
              :preserve
                var canvas = document.getElementById('granular_basic_cityscape_stage1_lesson4');
                var context = canvas.getContext('2d');

                var ground = 280;
                context.fillStyle = 'blue';
                context.fillRect(50, ground - 160, 90, 160);

                context.fillStyle = '#FF0000';
                context.fillRect(200, ground - 90, 160, 90);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#granular_basic_cityscape_stage1_lesson4

  - challenge_index += 1
  #challenge4.challenge.row.py-4
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 4

          %figure.float-xs-right.px-2
            = image_tag('lessons/granular_basic_cityscape/stage1/challenge4Example.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 4 Sample Solution

          %p
            Draw a gray building that is
            %span.highlight 90 pixels wide and 210 pixels tall.
          %p
            The building's
            %span.highlight bottom left corner should be at (60, 280).
          %p
            Most importantly, the
            %span.highlight building should be gray (#999999).

          %p In the end your building should look like the example provided to the right.
          = render 'lessons/relevant', relevant: [:coordinates, :fill_style, :fill_rect]
          = render 'lessons/code_preview', stage: 1, challenge: 3, editor_id: 'granular_basic_cityscape_stage1_challenge3_editor'

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_challenge4_editor'} do
          :preserve
            var canvas = document.getElementById('granular_basic_cityscape_stage1_challenge4');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/granular_basic_cityscape/stage1/challenge4.png')
            %canvas#granular_basic_cityscape_stage1_challenge4
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var ground = 280;

            context.fillStyle = '#999999';
            context.fillRect(60, ground - 210, 90, 210);



  #section5.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Use Variables to Size and Position a Building
          %p
            We can use variables to automatically size and position a building.
          %p
            %span.highlight
              In this example, we draw a green building (color #228B22) that is twice
              as tall as it is wide, and sitting on the ground at (60, 280).
          %p
            To change the size of the building, all we do is store a different value
            in the variable <i>w</i>. The program automatically calculates the height
            of the building (assigning it to the variable <i>h</i>) and the y-coordinate
            of the top of the building (assigning it to the variable <i>y</i>). These
            variables are then used to draw the building.
          = render 'lessons/relevant', relevant: [:variables, :coordinates, :fill_style, :fill_rect]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_example5_editor'} do
              :preserve
                var canvas = document.getElementById('granular_basic_cityscape_stage1_example5');
                var context = canvas.getContext('2d');

                var w = 80;
                var h = 2 * w;
                var y = 280 - h;

                context.fillStyle = '#228B22';
                context.fillRect(60, y, w, h);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#granular_basic_cityscape_stage1_example5

  - challenge_index += 1
  #challenge5.challenge.row.py-4
    .col-xs-12
      .row.pb-2
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 5

          %figure.float-xs-right.px-2
            = image_tag('lessons/granular_basic_cityscape/stage1/challenge5Example.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 5 Sample Solution

          %p
            This time
            %span.highlight use a variable
            to calculate the x and y position of the building and the width and height (
            = link_to_lesson('more info about variables', :variables, nil, class: 'reference-link', data: {slug: :variables})
            ). Setting a variable looks like this:

          %pre
            %code
              :preserve
                var x = 9;

          %p
            Using these variables draw a
            %span.highlight gray (#666666) building
            that is positioned on the
            %span.highlight ground at (60, 240)
            and is
            %span.highlight 80 pixels tall and 200 pixels wide.

          %p In the end your building should look like the example provided to the right.

          = render 'lessons/relevant', relevant: [:variables, :coordinates, :fill_style, :fill_rect]
          = render 'lessons/code_preview', stage: 1, challenge: 4, editor_id: 'granular_basic_cityscape_stage1_challenge4_editor'

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_challenge5_editor'} do
          :preserve
            var canvas = document.getElementById('granular_basic_cityscape_stage1_challenge5');
            var context = canvas.getContext('2d');

            // SET THE VARIABLES PROPERLY
            var ground =
            var width =
            var height =
            var x =
            var y =

            // CODE TO SET THE BUILDING COLOR (#666666) HERE

            context.fillRect(x, y, width, height);

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/granular_basic_cityscape/stage1/challenge5.png')
            %canvas#granular_basic_cityscape_stage1_challenge5
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var ground = 240;
            var width = 200;
            var height = 80;
            var x = 60;
            var y = ground - height;

            context.fillStyle = '#666666';

            context.fillRect(x, y, width, height);



  #section6.section.py-2 &nbsp;

  - challenge_index += 1
  #challenge6.challenge.row.pt-2.pb-4
    #section6.col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 6

          %figure.float-xs-right.px-2
            .pb-1= image_tag('lessons/granular_basic_cityscape/stage1/challenge6Visual1.png', class: 'img-fluid')

            = image_tag('lessons/granular_basic_cityscape/stage1/challenge6Example.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 6 Sample Solution

          %p
            For our cityscape, we don't want think about buildings in terms of pixels.
            We want to size buildings based on the number of floors they have and the
            number of office units on each floor, and then write the program so it
            calculates the number of pixels for us.
          %p
            Each office unit is
            %span.highlight 16 pixels wide and 16 pixels tall.
            The outer walls, roof, and floor of the building are each
            %span.highlight 4 pixels thick.
          %p
            Write a program to calculate the size and position of the building for you.
            The variable <i>units</i> stores the number of office units on each floor.
            The variable <i>floors</i> stores the number of floors in the building.
          %p
            %span.highlight
              Then draw a gray (color #999999) building with 10 floors and 8 office units
              on each floor sitting on the ground at (120, 280).
          %p
            The function, drawOffices(x, y, w, h) will draw the offices of the building
            if you define w, h, x, and y correctly, where (x, y) are the coordinates of the top left
            corner of your building, and w and h are the width and height of your building.
          %p
            In the end your drawing should look like the example on the right.

          = render 'lessons/relevant', relevant: [:variables, :coordinates, :fill_style, :fill_rect]
          = render 'lessons/code_preview', stage: 1, challenge: 5, editor_id: 'granular_basic_cityscape_stage1_challenge5_editor'


      .row.pt-2
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_challenge6_editor'} do
          :preserve
            var canvas = document.getElementById('granular_basic_cityscape_stage1_challenge6');
            var context = canvas.getContext('2d');

            var ground = 280;
            var units = 8;
            var floors = 10;

            // CALCULATE THE WIDTH "w" HERE
            var w =
            // CALCULATE THE HEIGHT "h" HERE
            var h =

            // YOUR CODE TO CALCULATE X AND Y OF THE BUILDING HERE
            var x =
            var y =

            // YOUR CODE TO SET THE COLOR OF THE BUILDING (#999999) HERE

            context.fillRect(x, y, w, h);

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/granular_basic_cityscape/stage1/challenge6.png')
            %canvas#granular_basic_cityscape_stage1_challenge6
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            var ground = 280;
            var units = 8;
            var floors = 10;

            var w = (units * 16) + (2 * 4);
            var h = (floors * 16) + (2 * 4);

            var x = 120;
            var y = ground - h;

            context.fillStyle = '#999999';
            context.fillRect(x, y, w, h);



  #section7.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Use a Function to Draw a Building
          %p
            Drawing a single building takes quite a few steps. We have to calculate
            the width and height of the building, and the y-coordinate of the top of
            the building. Then we have to set the building color and draw the rectangle.
            Once we start drawing in windows, the list of steps will get much longer.
          %p
            To draw our cityscape, we have to draw dozens of buildings. Typing in all
            that code for each building is going to be a lot of work.
          %p
            If there is a chunk of code that you are going to use over and over again,
            putting that code into a function can make your life much easier. Then,
            to run the code, all you have to do is call the function by typing one line.
          %p
            %span.highlight
              In this example, we create a function that will draw a French flag. Because
              we might want to draw a French flag in lots of different places, we make the
              x- and y-coordinates of the flag variables.
            When we call drawFrenchFlag(30, 100), the 30 is assigned to the variable <i>x</i>
            and the 100 is assigned to the variable <i>y</i> inside of the function. Now we can
            easily draw as many French flags as we want!
          = render 'lessons/relevant', relevant: [:fill_rect, :fill_style, :coordinates, :variables, :functions]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_example7_editor'} do
              :preserve
                var canvas = document.getElementById('granular_basic_cityscape_stage1_example7');
                var context = canvas.getContext('2d');

                function drawFrenchFlag(x, y) {
                  context.fillStyle = '#0055A4';
                  context.fillRect(x, y, 20, 40);

                  context.fillStyle = '#FFFFFF';
                  context.fillRect(x + 20, y, 20, 40);

                  context.fillStyle = '#EF4135';
                  context.fillRect(x + 40, y, 20, 40);
                }

                drawFrenchFlag(30, 100);
                drawFrenchFlag(150, 50);
                drawFrenchFlag(300, 180);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#granular_basic_cityscape_stage1_example7

  - challenge_index += 1
  #challenge7.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 7

          %figure.float-xs-right.px-2
            = image_tag('lessons/granular_basic_cityscape/stage1/challenge7Example.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 7 Sample Solution

          %p
            %span.highlight
              Write a function to draw the building from Challenge 6.
            The function will be passed four values that it will assign to the following
            four variables (called parameters). The first parameter, <i>leftX</i>, is the
            x-coordinate of the left side of the building. The second parameter, <i>groundY</i>,
            is the y-coordinate of the base of the building. The third parameter, <i>units</i>,
            is the number of office units on a floor. The fourth parameter, <i>floors</i>, is
            the number of floors in the building.
          %p
            %span.highlight
              Then use the function to draw two buildings. The first building will have
              12 floors and 8 office units per floor, and it will be sitting on the ground
              at (50, 300). The second building will have 18 floors and 6 office units per
              floor, and it will be sitting on the ground at (200, 300).
          %p
            Just like with Challenge 6, both buildings should be gray (color #999999) and each
            office should be 16 x 16 width 4 pixels of padding around the whole building.
          = render 'lessons/relevant', relevant: [:fill_style, :fill_rect, :coordinates, :variables, :functions]
          = render 'lessons/code_preview', stage: 1, challenge: 6, editor_id: 'granular_basic_cityscape_stage1_challenge6_editor'

      .row.pt-2
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_challenge7_editor'} do
          :preserve
            var canvas = document.getElementById('granular_basic_cityscape_stage1_challenge7');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, units, floors) {

              // YOUR CODE FOR DRAWING A GENERAL BUILDING HERE

            }

            // YOUR CODE FOR DRAWING THE TWO SPECIFIC BUILDINGS HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/granular_basic_cityscape/stage1/challenge7.png')
            %canvas#granular_basic_cityscape_stage1_challenge7
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, units, floors) {
              var width = (units * 16) + (4 * 2);
              var height = (floors * 16) + (4 * 2);
              context.fillRect(leftX, groundY - height, width, height);
            }

            context.fillStyle = '#999999';
            drawBuilding(50, 300, 8, 12);
            drawBuilding(200, 300, 6, 18);



  #section8.section.py-2 &nbsp;

  .lesson.row.pt-2
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Lesson: Use translate() to Position the Building
          %p
            Now we are going to clean up our functions a little bit.
          %p
            A well-written function is like a polite robot who comes over to your house
            to do a job, and then leaves everything exactly as it found it. But if you
            look at the function used to draw a French flag in the previous example, it
            wasn't so tidy. It changed the context.fillStyle to '#EF4135' and never
            changed it back.
          %p
            %span.highlight
              To make our function more tidy, we are going to call context.save() at the
              start of the function and context.restore() at the end of the function.
            Calling context.save() saves the state of the context (including the current
            context.fillStyle), and context.restore() restores the context to the last
            time you saved it.
          %p
            %span.highlight
              The other change we are going to make to our function is to use context.translate().
            Notice how we had to do some calculations with x and y to figure out the positions
            of the white and red rectangles in the French flag? Imagine you had to do the same
            calculations for a hundred windows in a building. By using context.translate(), we can
            eliminate a lot of that math.
          %p
            Calling context.translate() moves the origin of the context. If we move the origin
            of the context to the top left corner of the flag, then we can draw the rectangles
            in the flag as though the flag is positioned at (0, 0). The math is much easier.
            However, when using context.translate(), it's even more important to save and then
            restore the context. If you think changing the context.fillStyle is rude, changing
            the origin of the context and not changing it back is much ruder!
          %p
            (As an exercise, try to predict what would happen if you took out the context.save()
            and context.restore() from the function. You'll have to reset the example and then
            refresh the entire page to get everything back to normal.)
          = render 'lessons/relevant', relevant: [:fill_style, :fill_rect, :coordinates, :functions, :save, :translate]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_example8_editor'} do
              :preserve
                var canvas = document.getElementById('granular_basic_cityscape_stage1_example8');
                var context = canvas.getContext('2d');

                function drawFrenchFlag(x, y) {
                  context.save();
                  context.translate(x, y);

                  context.fillStyle = '#0055A4';
                  context.fillRect(0, 0, 20, 40);

                  context.fillStyle = '#FFFFFF';
                  context.fillRect(20, 0, 20, 40);

                  context.fillStyle = '#EF4135';
                  context.fillRect(40, 0, 20, 40);

                  context.restore();
                }

                drawFrenchFlag(30, 100);
                drawFrenchFlag(150, 50);
                drawFrenchFlag(300, 180);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#granular_basic_cityscape_stage1_example8

  - challenge_index += 1
  #challenge8.challenge.row.py-4
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 8

          %figure.float-xs-right.px-2
            = image_tag('lessons/granular_basic_cityscape/stage1/challenge8Example.png', class: 'img-fluid canvas-example')
            %figcaption.text-xs-center.small Challenge 8 Sample Solution

          %p
            This time, write the drawBuilding() function, but using
            %span.highlight context.save(), context.translate(), and context.retore()
            provided in the function. You'll need to adjust your code from Challenge 7
            accordingly.
          %p
            %span.highlight
              Then use the drawBuilding function to draw one building with 12 office
              units per floor and 6 floors sitting on the ground at (40, 300) and
              another building with 10 office units per floor and 15 floors at (280, 300).
          %p
            Both buildings should be gray (color #999999) and each office
            should be 16 x 16 width 4 pixels of padding around the whole building.
          %p
            Just remember if you call translate but don't restore the state of the context
            then the next translation will be relative to the first translation and your
            drawing may be off the canvas!
          = render 'lessons/relevant', relevant: [:fill_style, :fill_rect, :coordinates, :functions, :save, :translate]
          = render 'lessons/code_preview', stage: 1, challenge: 7, editor_id: 'granular_basic_cityscape_stage1_challenge7_editor'

      .row.py-2
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'granular_basic_cityscape_stage1_challenge8_editor'} do
          :preserve
            var canvas = document.getElementById('granular_basic_cityscape_stage1_challenge8');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, units, floors) {
              context.save();

              var width = (units * 16) + (4 * 2);
              var height = (floors * 16) + (4 * 2);

              // CODE TO TRANSLATE POSITION HERE

              // CODE FOR DRAWING A BUILDING HERE

              context.restore();
            }

            // YOUR CODE FOR DRAWING THE TWO BUILDINGS HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/granular_basic_cityscape/stage1/challenge8.png')
            %canvas#granular_basic_cityscape_stage1_challenge8
          .alert

      .row.pt-2
        = render :layout => '/lessons/code_i_wrote' do
          :preserve
            var canvas = document.getElementById('flappy_square_stage#{stage_index}_challenge#{challenge_index}');
            var context = canvas.getContext('2d');

            function drawBuilding(leftX, groundY, units, floors) {
              context.save();

              var width = (units * 16) + (4 * 2);
              var height = (floors * 16) + (4 * 2);

              context.translate(leftX, groundY - height);
              context.fillRect(0, 0, width, height);

              context.restore();
            }

            context.fillStyle = '#999999';
            drawBuilding(40, 300, 12, 6);
            drawBuilding(280, 300, 10, 15);
