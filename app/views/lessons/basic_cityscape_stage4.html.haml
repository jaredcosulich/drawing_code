#basic_cityscape_stage4.lesson
  %h1 Stage 4

  = render 'lessons/challenge_count'

  .description.row.py-3
    .col-xs-6
      %h2.py-2
        Overview
      %p
        In the fourth stage of the Cityscape Challenge, we will create three rows of
        buildings. The buildings in the foreground will be larger and lighter in color.
        The buildings in the background will be smaller and darker in color. This will
        create the illusion of 3D depth.

    .col-xs-6
      = image_tag('lessons/basic_cityscape_stage4/overviewVisual1.png', class: 'img-fluid')


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw a Row of Buildings
          %p
            When we wanted to draw a row of windows in Stage 2 Challenge 2, we used a for
            loop. A for loop is great when we want to draw something over and over again a
            specific number of times.
          %p
            The difference between drawing a row of windows and drawing a row of buildings
            is: we know exactly how many windows to draw, but we don't know how many buildings
            to draw because every building has a different width.
          %p
            So, to draw a row of buildings, we are going to use a while loop instead of a for loop.
          %p
            %span.highlight
              In this example, we draw a white rectangle that is 400 pixels wide, and then use a
              while loop to draw pink squares along the bottom of the white rectangle until the last
              square reaches the end of the rectangle.
          %p
            Before the while loop, we assign the variable x = 0. We are going to use x as the
            condition for our while loop, except insteading of going up by 1 each time through the
            loop, x will go up by the width of the next square. So, if x = 0 at the start of the
            first loop and we draw a 32x32 square, we add 32 to x and x = 32 at the start of the
            next loop.
          %p
            We keep going through the while loop as long as x < 400.
          %p
            %span.highlight
              Press "Run" a few times and count the number of squares drawn. The number of squares
              will change depending on the size of the squares.
          %p= render 'lessons/relevant', relevant: [:functions, :variables, :random]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_example1_editor'} do
              :preserve
                var canvas = document.getElementById('basic_cityscape_stage4_example1');
                var context = canvas.getContext('2d');
                context.clearRect(0, 0, canvas.width, canvas.height);
                
                function randomInteger(min, max) {
                  var i = min + Math.floor((max - min + 1) * Math.random());
                  
                  return i;
                }
                
                function drawSquare(s) {
                  context.save();
                  context.translate(0, -s);
                  context.strokeRect(0, 0, s, s);
                  context.restore();
                }
                
                var x = 0;
                context.save();
                context.fillStyle = '#FFFFFF';
                context.fillRect(0, 0, 400, 100);
                context.strokeStyle = '#FF1493';
                context.translate(0, 100);
                
                while (x < 400) {
                  var s = randomInteger(10, 50);
                  context.save();
                  context.translate(x, 0);
                  drawSquare(s);
                  context.restore();
                  
                  x = x + s;
                }
                
                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#basic_cityscape_stage4_example1


  #challenge1.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 1
          %p
            %span.highlight
              Create a drawBuildingRow() function to draw a row of random buildings.
          %p
            %span.highlight
              Draw the first building sitting on the ground at (0, 320), add a 12-pixel
              space between buildings, and draw buildings as long as the x-coordinate of
              the next building is less than 500.
          %p
            Note: In the example above with the random squares, we use x = x + s to update the
            value of x for the next loop. This works because both x and s are defined within the
            "scope" of the while loop. However, when drawing buildings, we can't use the variable
            w inside the while loop because w is only defined inside of the drawBuilding() function.
            What we can do instead is use the variable units, which is the number of office units
            on a floor in the building, to calculate the value of x for the next loop.
          %p
            When your drawBuildingRow() function is ready, draw a row of buildings and press "Run"
            multiple times to make sure it is working.
            %span.highlight
              Once you feel satisfied with your drawings, mark the challenge as complete by
              selecting "Yes, it looks good".
          %p= render 'lessons/relevant', relevant: [:functions, :variables, :random]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_challenge1_editor'} do
          :preserve
            var canvas = document.getElementById('basic_cityscape_stage4_challenge1');
            var context = canvas.getContext("2d");
            context.clearRect(0, 0, canvas.width, canvas.height);

            function drawBuilding(leftX, groundY, units, floors, windowType, roofType) {

              // YOUR CODE FOR DRAWING A BUILDING HERE

            }
            
            function drawWindow(windowType) {
              
              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF WINDOWS HERE
              
            }
            
            function drawRoof(roofType) {
              
              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF ROOFS HERE
              
            }
            
            function randomInteger(min, max) {
              
              // YOUR CODE FOR GENERATING A RANDOM INTEGER BETWEEN MIN AND MAX, INCLUDING MIN AND MAX, HERE
              
            }
            
            function drawBuildingRow() {
              
              // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE
              
            }
            
            // DRAW A ROW OF RANDOM BUILDINGS SITTING ON THE GROUND STARTING AT (0, 320) HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#basic_cityscape_stage4_challenge1
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw a Smaller Row of Random Buildings
          %p
            To create a 3D effect, we are going to draw two more rows of buildings behind
            the first row. Because objects get smaller in the distance, we will draw the other
            rows of buildings slightly smaller using the context.scale() function.
          %p
            %span.highlight
              In this example, we use the context.scale() function to change the size of four
              random flags.
          %p
            By using context.scale(0.6, 0.6), we are drawing everything at 60% scale. If we use
            context.scale(1, 1), then we are drawing everything at normal size.
          %p
            Try context.scale(1.5, 1.5) and see what happens. The first value changes the scale
            in the x-direction. The second value changes it in the y-direction. The two values do
            not have to be the same.
          %p
            Note: The scale of the context gets saved and restored with context.save() and context.restore().
          %p= render 'lessons/relevant', relevant: [:functions, :variables, :random]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_example2_editor'} do
              :preserve
                var canvas = document.getElementById('basic_cityscape_stage4_example2');
                var context = canvas.getContext('2d');
                context.clearRect(0, 0, canvas.width, canvas.height);
                
                function randomInteger(min, max) {
                  var i = min + Math.floor((max - min + 1) * Math.random());
                  
                  return i;
                }

                function drawFlag(country) {
                  context.save();
                  
                  switch (country) {
                    case 0:
                      context.fillStyle = '#0055A4';
                      context.fillRect(0, 0, 30, 60);
                      
                      context.fillStyle = '#FFFFFF';
                      context.fillRect(30, 0, 30, 60);
                      
                      context.fillStyle = '#EF4135';
                      context.fillRect(60, 0, 30, 60);
                      break;
                    
                    case 1:
                      context.fillStyle = '#FCD116';
                      context.fillRect(0, 0, 90, 30);
                      
                      context.fillStyle = '#003893';
                      context.fillRect(0, 30, 90, 15);
                      
                      context.fillStyle = '#CE1126';
                      context.fillRect(0, 45, 90, 15);
                      break;
                    
                    case 2:
                      context.fillStyle = '#ED1C24';
                      context.fillRect(0, 0, 90, 60);
                      
                      context.fillStyle = '#FFFFFF';
                      context.fillRect(0, 10, 90, 40);
                      
                      context.fillStyle = '#241D4F';
                      context.fillRect(0, 20, 90, 20);
                      break;
                  }
                  
                  context.restore();
                }
                
                context.save();
                context.scale(0.6, 0.6);
                context.translate(20, 20);
                
                for (var i = 0; i < 4; i = i + 1) {
                  var flagType = randomInteger(0, 2);
                  drawFlag(flagType);
                  context.translate(100, 30);
                }
                
                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#basic_cityscape_stage4_example2


  #challenge2.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 2
          %p
            %span.highlight
              Update the drawBuildingRow() function so we can draw rows with different scales.
          %p
            In the definition of the drawBuildingRow() function, add a parameter called scale:
            drawBuildingRow(scale).
          %p
            Then, inside the drawBuildingRow() function, after saving the context for the first
            time, change the scale of the context using context.scale(scale, scale).
          %p
            If you try to draw a row of buildings at 0.6 (or 60%) scale now, you will see something
            interesting. The buildings are smaller, but the row of buildings is not at least 500 pixels
            long on the canvas. In fact, the row of buildings is just over 300 pixels long on the canvas.
            That's because 60% of 500 is 300.
          %p
            To draw a row of buildings at 0.6 scale that is at least 500 pixels long on the canvas,
            we need to adjust the condition inside our while loop. Instead of x < 500, we should keep
            drawing buildings as long as x < 500 / scale. For 0.6 scale, that works out to x < 833.
          %p
            %span.highlight
              Draw a row of buildings at 0.6 scale where the first building is sitting on the
              ground at (0, 280) and the row of buildings is at least 500 pixels long on the canvas.
          %p
            %span.highlight
              Then, once you feel satisfied with your drawings, mark the challenge as complete by
              selecting "Yes, it looks good".
          %p= render 'lessons/relevant', relevant: [:functions, :variables, :random]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_challenge2_editor'} do
          :preserve
            var canvas = document.getElementById('basic_cityscape_stage4_challenge2');
            var context = canvas.getContext('2d');
            context.clearRect(0, 0, canvas.width, canvas.height);
            
            function drawBuilding(leftX, groundY, units, floors, windowType, roofType) {

              // YOUR CODE FOR DRAWING A BUILDING HERE

            }
            
            function drawWindow(windowType) {
              
              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF WINDOWS HERE
              
            }
            
            function drawRoof(roofType) {
              
              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF ROOFS HERE
              
            }
            
            function randomInteger(min, max) {
              
              // YOUR CODE FOR GENERATING A RANDOM INTEGER BETWEEN MIN AND MAX, INCLUDING MIN AND MAX, HERE
              
            }
            
            function drawBuildingRow() {
              
              // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE
              
            }
            
            // DRAW A ROW OF RANDOM BUILDINGS AT 0.6 SCALE SITTING ON THE GROUND STARTING AT (0, 280) HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#basic_cityscape_stage4_challenge2
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw a Smaller and Darker Row of Random Buildings
          %p
            In addition to making the rows in the back smaller, we will also make them darker.
          %p
            There are several ways to define colors when using context.fillStyle. So far, we
            have been using the color #999999 to draw our buildings. Another way to write #999999
            is rgb(153, 153, 153). The number 153 in base 10 is actually 99 in base 16.
          %p
            When using rgb() to define a color, we are describing the amount of red (r), green (g),
            and blue (b) in the color, where 0 is none and 255 is the maximum value. For example, black
            is rgb(0, 0, 0), which is no red, no green, and no blue. White is rgb(255, 255, 255), which
            is maximum red, maximum green, and maximum blue.
          %p
            %span.highlight
              In this example, we draw a rectangle with a random color by selecting and combining
              random amounts of red, green, and blue.
          %p
            There are a few things to keep in mind when using rgb() to define a color. First, the red,
            green, and blue values have to be integers between 0 and 255. No decimals. Second, the
            rgb() definition is a string of text. So, we add pieces of text together to get what we need.
          %p
            %span.highlight
              Press "Run" to change the color of the rectangle.
          %p= render 'lessons/relevant', relevant: [:functions, :variables, :random]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_example3_editor'} do
              :preserve
                var canvas = document.getElementById('basic_cityscape_stage4_example3');
                var context = canvas.getContext('2d');
                context.clearRect(0, 0, canvas.width, canvas.height);
                
                function drawText(text, x, y) {
                  context.save();
                  context.fillStyle = 'rgb(0, 0, 0)';
                  context.font = '16px sans-serif';
                  context.textAlign = 'center';
                  context.fillText(text, x, y);
                  context.restore();
                }

                function randomInteger(min, max) {
                  var i = min + Math.floor((max - min + 1) * Math.random());
                  
                  return i;
                }
                
                var r = randomInteger(0, 255) // Choose a random amount of red
                var g = randomInteger(0, 255) // Choose a random amount of green
                var b = randomInteger(0, 255) // Choose a random amount of blue
                var color = 'rgb(' + r + ', ' + g + ', ' + b + ')'; // Combine the red, green, and blue in a text string
                
                context.save();
                context.fillStyle = color; // Use the color as the context's fillStyle
                context.fillRect(40, 40, 360, 240);
                
                drawText(color, 220, 300); // Print the text string stored in the variable color
                
                context.restore();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#basic_cityscape_stage4_example3


  #challenge3.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 3
          %p
            %span.highlight
              Update the drawBuildingRow() and drawBuilding() functions to draw darker
              buildings as the scale gets smaller.
          %p
            %span.highlight
              Inside the drawBuildingRow() function, use Math.round(153 * scale) to calculate
              the amount of red, green, and blue in the building's color.
            (For the building's color, the amount of red, green, and blue are all the same.)
            This will make the color darker as the scale gets smaller.
          %p
            Create a text string from the red, green, and blue values. Store the text string
            in a variable called buildingColor. Store the text string 'rgb(102, 102, 102)' and
            store it in a variable called windowColor. The window color for all three rows is
            the same.
          %p
            Pass the variables buildingColor and windowColor into the drawBuilding() function.
            Make sure you update the drawBuilding() function definition to include buildingColor
            and windowColor as parameters.
          %p
            Inside the drawBuilding() function, set the context.fillStyle to buildingColor
            when drawing the building and roof, and to windowColor when drawing the windows.
          %p
            %span.highlight
              Then, draw a row of buildings at 0.6 scale where the first building is sitting on
              the ground at (0, 280). The buildings should be smaller and darker than the row of
              buildings in Challenge 1.
          %p
            %span.highlight
              Once you feel satisfied with your drawings, mark the challenge as complete by
              selecting "Yes, it looks good".
          %p= render 'lessons/relevant', relevant: [:functions, :variables]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_challenge3_editor'} do
          :preserve
            var canvas = document.getElementById('basic_cityscape_stage4_challenge3');
            var context = canvas.getContext("2d");
            context.clearRect(0, 0, canvas.width, canvas.height);

            function drawBuilding(leftX, groundY, units, floors, windowType, roofType) {

              // YOUR CODE FOR DRAWING A BUILDING HERE

            }
            
            function drawWindow(windowType) {
              
              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF WINDOWS HERE
              
            }
            
            function drawRoof(roofType) {
              
              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF ROOFS HERE
              
            }
            
            function randomInteger(min, max) {
              
              // YOUR CODE FOR GENERATING A RANDOM INTEGER BETWEEN MIN AND MAX, INCLUDING MIN AND MAX, HERE
              
            }
            
            function drawBuildingRow() {
              
              // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE
              
            }
            
            // DRAW A ROW OF RANDOM BUILDINGS AT 0.6 SCALE SITTING ON THE GROUND STARTING AT (0, 280) HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#basic_cityscape_stage4_challenge3
          .alert


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.py-2
            Draw Three Rows of Buildings and a Horizon
          %p
            We are almost done. The last step is to assemble your final drawing.
          %p
            %span.highlight
              In this example, we draw a cake for celebrating! Press "Run" to find your favorite cake.
          %p= render 'lessons/relevant', relevant: [:functions, :variables, :random]

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_example4_editor'} do
              :preserve
                var canvas = document.getElementById('basic_cityscape_stage4_example4');
                var context = canvas.getContext('2d');
                context.clearRect(0, 0, canvas.width, canvas.height);

                function randomInteger(min, max) {
                  var i = min + Math.floor((max - min + 1) * Math.random());
                  
                  return i;
                }
                
                function color(i) {
                  switch (i) {
                    case 0:
                      c = '#90EE90';
                      break;
                    
                    case 1:
                      c = '#E6E6FA';
                      break;
                    
                    case 2:
                      c = '#FFFACD';
                      break;
                    
                    case 3:
                      c = '#FFB6C1';
                      //c = '#FFE4E1';
                      break;
                    
                    case 4:
                      c = '#B0E0E6';
                      break;
                    
                    case 5:
                      c = '#1E90FF';
                      break;
                    
                    case 6:
                      c = '#9932CC';
                      break;
                    
                    case 7:
                      c = '#BA55D3';
                      break;
                    
                    case 8:
                      c = '#FF1493';
                      break;
                    
                    case 9:
                      c = '#3CB371';
                      break;
                  }
                  
                  return c;
                }
                
                function drawCandle() {
                  context.save();
                  context.translate(0, -80);
                  context.fillStyle = '#FFFFFF';
                  context.fillRect(-5, 30, 10, 50);
                  context.fillStyle = '#FFFF00';
                  context.fillRect(-6, 0, 12, 30);
                  context.fillStyle = '#FF8C00';
                  context.fillRect(-5, 10, 10, 20);
                  context.fillStyle = '#FF0000';
                  context.fillRect(-4, 20, 8, 10);
                  context.restore();
                }
                
                function drawDecoration(icingColor, accentColor) {
                  context.save();
                  context.rotate(0.25 * Math.PI);
                  context.fillStyle = accentColor;
                  context.fillRect(-8, -8, 16, 16);
                  context.rotate(0.25 * Math.PI);
                  context.fillStyle = icingColor;
                  context.fillRect(-8, -8, 16, 16);
                  context.rotate(0.25 * Math.PI);
                  context.fillStyle = accentColor;
                  context.fillRect(-3, -3, 6, 6);
                  context.restore();
                }
                
                function drawTier(cakeColor, icingColor) {
                  context.save();
                  context.fillStyle = cakeColor;
                  context.translate(-100, 0);
                  context.fillRect(0, 0, 200, 50);
                  
                  context.translate(1, 45);
                  context.fillStyle = icingColor;
                  for (var i = 0; i < 19; i = i + 1) {
                    context.save();
                    context.rotate(0.25 * Math.PI);
                    context.fillRect(0, 0, 10, 10);
                    context.restore();
                    context.translate(11, 0);
                  }
                  context.restore();
                }
                
                function drawCake() {
                  var cakeColor = color(randomInteger(0, 4));
                  var icingColor = color(randomInteger(5, 9));
                  
                  context.save();
                  context.fillStyle = '#000000';
                  context.fillRect(0, 0, canvas.width, canvas.height);
                  context.translate(200, 300);
                  for (var i = 0; i < 4; i = i + 1) {
                    context.translate(0, -50);
                    drawTier(cakeColor, icingColor);
                  }
                  
                  context.translate(-80, 0);
                  for (var i = 0; i < 5; i = i + 1) {
                    drawCandle();
                    context.translate(40, 0);
                  }
                  context.restore();
                }
                
                drawCake();

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#basic_cityscape_stage4_example4


  #challenge4.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title.py-2
            Challenge 4
          %p
            %span.highlight
              In the drawBuildingRow() function, change the while loop to run as long as
              x < canvas.width.
            This will ensure each row of buildings will cover the entire width of the canvas.
          %p
            %span.highlight
              Draw a gray rectangle (color #CCCCCC) at (0, 220) with a width equal to
              canvas.width and a height of 100.
            This rectangle is the ground.
          %p
            %span.highlight
              Draw a row of buildings with a scale of 0.6 at (0, 280).
            This is the back row of buildings.
          %p
            %span.highlight
              Draw a row of buildings with a scale of 0.8 at (0, 300).
            This is the middle row of buildings.
          %p
            %span.highlight
              Draw a row of buildings with a scale of 1.0 at (0, 320).
            This is the front row of buildings.
          %p
            Press "Run" multiple times to make sure you are drawing a random cityscape with
            three rows buildings. Each row should cover the width of the canvas, and as the
            rows get farther away, the buildings should get smaller and darker.
            %span.highlight
              Once you feel satisfied with your drawings, mark the challenge as complete by
              selecting "Yes, it looks good".
          %p= render 'lessons/relevant', relevant: [:functions, :variables, :random, :floor]

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'basic_cityscape_stage4_challenge4_editor'} do
          :preserve
            var canvas = document.getElementById('basic_cityscape_stage4_challenge4');
            var context = canvas.getContext("2d");
            context.clearRect(0, 0, canvas.width, canvas.height);

            function drawBuilding(leftX, groundY, units, floors, windowType, roofType) {

              // YOUR CODE FOR DRAWING A BUILDING HERE

            }
            
            function drawWindow(windowType) {
              
              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF WINDOWS HERE
              
            }
            
            function drawRoof(roofType) {
              
              // YOUR CODE FOR DRAWING THE FOUR DIFFERENT TYPES OF ROOFS HERE
              
            }
            
            function randomInteger(min, max) {
              
              // YOUR CODE FOR GENERATING A RANDOM INTEGER BETWEEN MIN AND MAX, INCLUDING MIN AND MAX, HERE
              
            }
            
            function drawBuildingRow() {
              
              // YOUR CODE FOR DRAWING A ROW OF RANDOM BUILDINGS HERE
              
            }
            
            // DRAW THE GROUND AND THREE ROWS OF BUILDINGS HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            %canvas#basic_cityscape_stage4_challenge4
          .alert
