#fill_style.page
  %h1 CanvasRenderingContext2D.fillStyle



  .official.row.py-3
    .col-xs-6
      %h2 The Official Description
      %p.py-2
        The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies
        the color or style to use inside shapes. The default is #000 (black).
      .source.text-xs-right
        = link_to('Mozilla Developer\'s Network', 'https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle', target: '_blank')

    .col-xs-6
      = image_tag('lessons/fill_style/visual1.png', class: 'img-fluid')


  .simple.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2
            Different ways to describe colors.
          %p.pt-2
            context.fillStyle allows you to set the color or gradient for a rectangle
            drawn with context.fillRect(). You can set the color in different ways:
          %ul.pb-2
            %li.py-1
              %strong Named Colors
              %br
              fillStyle will accept named colors (e.g. 'red'). Here is a full
              = link_to('list of HTML5 color names', 'https://www.tutorialspoint.com/html5/html5_color_names.htm', target: '_blank')
            %li.py-1
              %strong Hex Values
              %br
              Colors can also be described with a hex value (e.g. #00FF00 is red).
              You can find hex values for different colors at
              = link_to('color-hex.com', 'http://www.color-hex.com/', target: '_blank')
            %li.py-1
              %strong RGB Values
              %br
              Colors can also be described by an rgb value (e.g. rgb(255,0,0) is red).
              The three numbers in the "rgb()" method describe how much red, green, and blue are present
              in the color with 0 = none and 255 = 100%. You can find RGB values for different colors
              using this tool:
              = link_to('RGB Colors', 'http://www.rapidtables.com/web/color/RGB_Color.htm', target: '_blank')

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'fill_style_interactive1_editor'} do
              :preserve
                var canvas = document.getElementById('fill_style_interactive1');
                var context = canvas.getContext('2d');

                context.fillStyle = 'lime';
                context.fillRect(50,50,100,150);

                context.fillStyle = '#9417D2';
                context.fillRect(200,50,100,150);

                context.fillStyle = 'rgb(251,255,111)';
                context.fillRect(350,50,100,150);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#fill_style_interactive1


  .example.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2
            Example
          %p.pt-2
            You can also create gradients using fillStyle.

        .col-xs-12
          .interactive.row.py-1
            = render :layout => '/lessons/editor', :locals => {:editor_id => 'fill_style_example1_editor'} do
              :preserve
                var canvas = document.getElementById('fill_style_example1');
                var context = canvas.getContext('2d');

                var gradient = context.createLinearGradient(0,0,200,0);
                gradient.addColorStop(0,"green");
                gradient.addColorStop(0.5,"white");
                gradient.addColorStop(1,"blue");
                context.fillStyle = gradient;
                context.fillRect(10,10,200,100);

            .visual.col-xs-6
              %h5
                Canvas
                %small (your drawing will display here)
              .canvas
                %canvas#fill_style_example1




  #challenge1.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title Challenge 1
          %p.py-2 Draw a rectangle over the x at (100,100) using a color other than black.

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'fill_style_challenge1_editor'} do
          :preserve
            var canvas = document.getElementById('fill_style_challenge1');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/fill_style/challenge1.png')
            %canvas#fill_style_challenge1
          .alert

  #challenge2.challenge.row.py-3
    .col-xs-12
      .row
        .col-xs-12
          %h2.challenge-title Challenge 2
          %p.py-2
            Draw three rectangles using the colors rgb(128,0,128), #800080, and 'purple' over the x's
            at (50,100), (100,100), and (150,100).

      .row
        = render :layout => '/lessons/editor', :locals => {:editor_id => 'fill_style_challenge2_editor'} do
          :preserve
            var canvas = document.getElementById('fill_style_challenge2');
            var context = canvas.getContext('2d');

            // YOUR CODE HERE

        .visual.col-xs-6
          %h5
            Canvas
            %small (your drawing will display here)
          .canvas
            .background.hidden-xl-down= image_tag('lessons/fill_style/challenge2.png')
            %canvas#fill_style_challenge2
          .alert
